[{"url":"https://api.github.com/repos/Textualize/rich/issues/2139","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2139/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2139/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2139/events","html_url":"https://github.com/Textualize/rich/issues/2139","id":1188500086,"node_id":"I_kwDODSlIsc5G1xJ2","number":2139,"title":"[BUG] Flickering large progress display on Alacritty","user":{"login":"naterichman","id":68390038,"node_id":"MDQ6VXNlcjY4MzkwMDM4","avatar_url":"https://avatars.githubusercontent.com/u/68390038?v=4","gravatar_id":"","url":"https://api.github.com/users/naterichman","html_url":"https://github.com/naterichman","followers_url":"https://api.github.com/users/naterichman/followers","following_url":"https://api.github.com/users/naterichman/following{/other_user}","gists_url":"https://api.github.com/users/naterichman/gists{/gist_id}","starred_url":"https://api.github.com/users/naterichman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/naterichman/subscriptions","organizations_url":"https://api.github.com/users/naterichman/orgs","repos_url":"https://api.github.com/users/naterichman/repos","events_url":"https://api.github.com/users/naterichman/events{/privacy}","received_events_url":"https://api.github.com/users/naterichman/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-31T18:45:21Z","updated_at":"2022-03-31T18:58:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\n**Describe the bug**\r\n\r\nI have a progress bar that sometimes has up to 20 items, and it flickers kind of annoyingly.\r\n\r\nI made a representative example that flickers:\r\n\r\n```python\r\nfrom rich.progress import (\r\n    Progress,\r\n    TimeElapsedColumn,\r\n    SpinnerColumn,\r\n    TimeRemainingColumn,\r\n    TransferSpeedColumn,\r\n    BarColumn,\r\n    DownloadColumn,\r\n)\r\nfrom rich.console import Console\r\nimport time\r\n\r\n\r\ndef gen_stream():\r\n    for i in range(20):\r\n        msg = {\"bar\": i, \"total\": 1, \"completed\": 0}\r\n        yield msg\r\n    for i in range(20_000):\r\n        cycle = int(i / 20)\r\n        bar_num = i % 20\r\n        msg = {\"bar\": bar_num, \"total\": 1000, \"completed\": cycle}\r\n        yield msg\r\n\r\n\r\ndef main():\r\n    console = Console(record=True)\r\n    bars = {}\r\n\r\n    with Progress(\r\n        SpinnerColumn(),\r\n        BarColumn(),\r\n        DownloadColumn(),\r\n        TransferSpeedColumn(),\r\n        TimeElapsedColumn(),\r\n        TimeRemainingColumn(),\r\n        console=console,\r\n        transient=True,\r\n    ) as progress:\r\n\r\n        for msg in gen_stream():\r\n            bar = msg[\"bar\"]\r\n            if bar not in bars:\r\n                bars[bar] = progress.add_task(\"bar1\", start=False, total=1)\r\n            else:\r\n                to_update = {}\r\n                task_id = bars[bar]\r\n                task = progress._tasks[task_id]\r\n                if not task.started:\r\n                    progress.start_task(bars[bar])\r\n                if task.total == 1:\r\n                    to_update[\"total\"] = msg[\"total\"]\r\n                to_update[\"completed\"] = msg[\"completed\"]\r\n\r\n                progress.update(task_id, **to_update)\r\n            time.sleep(0.01)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Mac OSX with Alacritty</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nMac OSX with Alacritty as a terminal, however I've had the same issue on a Linux box as well.  NOTE: It seems to perform fine on iterm\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n```\r\npoetry run python -m rich.diagnose\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=205 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 53                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=205, height=53),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=205,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=53,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=205, height=53)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 205                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n```\r\n\r\n```\r\npoetry show rich\r\n poetry show rich\r\nname         : rich\r\nversion      : 10.16.2\r\ndescription  : Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\r\n\r\ndependencies\r\n - colorama >=0.4.0,<0.5.0\r\n - commonmark >=0.9.0,<0.10.0\r\n - pygments >=2.6.0,<3.0.0\r\n - typing-extensions >=3.7.4,<5.0\r\n```\r\n\r\n\r\n\r\n\r\n</details>\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2139/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2139/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2138","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2138/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2138/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2138/events","html_url":"https://github.com/Textualize/rich/pull/2138","id":1188439257,"node_id":"PR_kwDODSlIsc41atD4","number":2138,"title":"typo fix","user":{"login":"akettmann-e24","id":50422880,"node_id":"MDQ6VXNlcjUwNDIyODgw","avatar_url":"https://avatars.githubusercontent.com/u/50422880?v=4","gravatar_id":"","url":"https://api.github.com/users/akettmann-e24","html_url":"https://github.com/akettmann-e24","followers_url":"https://api.github.com/users/akettmann-e24/followers","following_url":"https://api.github.com/users/akettmann-e24/following{/other_user}","gists_url":"https://api.github.com/users/akettmann-e24/gists{/gist_id}","starred_url":"https://api.github.com/users/akettmann-e24/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akettmann-e24/subscriptions","organizations_url":"https://api.github.com/users/akettmann-e24/orgs","repos_url":"https://api.github.com/users/akettmann-e24/repos","events_url":"https://api.github.com/users/akettmann-e24/events{/privacy}","received_events_url":"https://api.github.com/users/akettmann-e24/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-31T17:58:24Z","updated_at":"2022-03-31T17:59:27Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2138","html_url":"https://github.com/Textualize/rich/pull/2138","diff_url":"https://github.com/Textualize/rich/pull/2138.diff","patch_url":"https://github.com/Textualize/rich/pull/2138.patch","merged_at":null},"body":"Typo fix","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2138/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2137","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2137/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2137/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2137/events","html_url":"https://github.com/Textualize/rich/issues/2137","id":1188361429,"node_id":"I_kwDODSlIsc5G1PTV","number":2137,"title":"[QUESTION] How to override markdown header justification?","user":{"login":"philwareublox","id":20516919,"node_id":"MDQ6VXNlcjIwNTE2OTE5","avatar_url":"https://avatars.githubusercontent.com/u/20516919?v=4","gravatar_id":"","url":"https://api.github.com/users/philwareublox","html_url":"https://github.com/philwareublox","followers_url":"https://api.github.com/users/philwareublox/followers","following_url":"https://api.github.com/users/philwareublox/following{/other_user}","gists_url":"https://api.github.com/users/philwareublox/gists{/gist_id}","starred_url":"https://api.github.com/users/philwareublox/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philwareublox/subscriptions","organizations_url":"https://api.github.com/users/philwareublox/orgs","repos_url":"https://api.github.com/users/philwareublox/repos","events_url":"https://api.github.com/users/philwareublox/events{/privacy}","received_events_url":"https://api.github.com/users/philwareublox/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-31T16:45:59Z","updated_at":"2022-03-31T16:45:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, \r\nCan I override the classes inside the markdown module?\r\nI'd like to change the Heading class, specifically I'd like to override the text.justify = \"center\" in the markdown Heading class. \r\nHow can I do this?\r\n\r\nMany thanks,\r\nPhil.","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2137/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2137/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2133","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2133/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2133/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2133/events","html_url":"https://github.com/Textualize/rich/pull/2133","id":1186316437,"node_id":"PR_kwDODSlIsc41TjJ5","number":2133,"title":"Fallback to text lexer when lexer not found","user":{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-30T11:28:30Z","updated_at":"2022-03-30T11:34:39Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2133","html_url":"https://github.com/Textualize/rich/pull/2133","diff_url":"https://github.com/Textualize/rich/pull/2133.diff","patch_url":"https://github.com/Textualize/rich/pull/2133.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [x] Bug fix\r\n- [ ] New feature\r\n- [ ] Documentation / docstrings\r\n- [ ] Tests\r\n- [ ] Other\r\n\r\n## Checklist\r\n\r\n- [x] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [x] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [x] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nCatches an exception raised inside pygments by `guess_lexer_for_filename` in the event that no lexer could be found. When this happens, we now fall back to the `TextLexer`.\r\n\r\nCloses #2018\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2133/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2131","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2131/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2131/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2131/events","html_url":"https://github.com/Textualize/rich/pull/2131","id":1185242821,"node_id":"PR_kwDODSlIsc41P-gG","number":2131,"title":"fix(types): typing fixes exposed by extra checking","user":{"login":"henryiii","id":4616906,"node_id":"MDQ6VXNlcjQ2MTY5MDY=","avatar_url":"https://avatars.githubusercontent.com/u/4616906?v=4","gravatar_id":"","url":"https://api.github.com/users/henryiii","html_url":"https://github.com/henryiii","followers_url":"https://api.github.com/users/henryiii/followers","following_url":"https://api.github.com/users/henryiii/following{/other_user}","gists_url":"https://api.github.com/users/henryiii/gists{/gist_id}","starred_url":"https://api.github.com/users/henryiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henryiii/subscriptions","organizations_url":"https://api.github.com/users/henryiii/orgs","repos_url":"https://api.github.com/users/henryiii/repos","events_url":"https://api.github.com/users/henryiii/events{/privacy}","received_events_url":"https://api.github.com/users/henryiii/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-29T18:16:24Z","updated_at":"2022-03-29T18:25:27Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2131","html_url":"https://github.com/Textualize/rich/pull/2131","diff_url":"https://github.com/Textualize/rich/pull/2131.diff","patch_url":"https://github.com/Textualize/rich/pull/2131.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [ ] Bug fix\r\n- [ ] New feature\r\n- [ ] Documentation / docstrings\r\n- [ ] Tests\r\n- [x] Other\r\n\r\n## Checklist\r\n\r\n- [x] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [ ] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [ ] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nThis enables a few extra mypy checks, and fixes type bugs exposed by those. There were three features enabled, but I've left one off: `warn_unrachable = true`. While it is really useful, and helped expose a couple of the issues fixed here, it also requires type ignoring in about 5-7 places unavoidably, so I've left it off. The most irritating one is `if sys.platform.startswith(\"win\")` constructs, which it will notice are unreachable if you are typing targeting a different platform. MyPy might fix this in https://github.com/python/mypy/issues/12286, which would run all platforms/versions in parallel and then combine the results (which would be really fantastic!), but until then, it's likely better just to manually add `--warn-unreachable` once in a while and make sure the errors reported are expected. (Depending on your preference, of course - I've been turning it on mostly, but I usually don't have quite as many ignores due to it - I thik I counted at least 7 here. If you want to see it, let me know, and I'll PR it).\r\n\r\nI'll comment inline on the others, but this is one fix:\r\n\r\n```python\r\nx: Iterable[Any] = ...\r\nlen(x)\r\n```\r\n\r\nis invalid. You can't take the length of an iterator. Someone could correctly put an iterator function in here, and this will break. Either this should be `Sequence` (which is what I've used here), or you should iterate over the iterator and build a sequence like a list or a tuple and then use that.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2131/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2131/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2122","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2122/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2122/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2122/events","html_url":"https://github.com/Textualize/rich/pull/2122","id":1182596379,"node_id":"PR_kwDODSlIsc41HOpX","number":2122,"title":"Allow default Console parameters to be configured with environment variables","user":{"login":"joouha","id":12154190,"node_id":"MDQ6VXNlcjEyMTU0MTkw","avatar_url":"https://avatars.githubusercontent.com/u/12154190?v=4","gravatar_id":"","url":"https://api.github.com/users/joouha","html_url":"https://github.com/joouha","followers_url":"https://api.github.com/users/joouha/followers","following_url":"https://api.github.com/users/joouha/following{/other_user}","gists_url":"https://api.github.com/users/joouha/gists{/gist_id}","starred_url":"https://api.github.com/users/joouha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joouha/subscriptions","organizations_url":"https://api.github.com/users/joouha/orgs","repos_url":"https://api.github.com/users/joouha/repos","events_url":"https://api.github.com/users/joouha/events{/privacy}","received_events_url":"https://api.github.com/users/joouha/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-03-27T17:07:51Z","updated_at":"2022-03-28T18:51:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2122","html_url":"https://github.com/Textualize/rich/pull/2122","diff_url":"https://github.com/Textualize/rich/pull/2122.diff","patch_url":"https://github.com/Textualize/rich/pull/2122.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [ ] Bug fix\r\n- [x] New feature\r\n- [ ] Documentation / docstrings\r\n- [ ] Tests\r\n- [ ] Other\r\n\r\n## Checklist\r\n\r\n- [x] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [x] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [x] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nThis allows the default values of the `Console` parameters `force_jupyter`, `force_terminal` & `force_interactive` to be overridden by setting the environment variables `RICH_FORCE_JUPYTER`, `RICH_FORCE_TERMINAL` & `RICH_FORCE_INTERACTIVE`.\r\n\r\nFixes issue #2119 \r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2122/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2120","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2120/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2120/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2120/events","html_url":"https://github.com/Textualize/rich/issues/2120","id":1182366546,"node_id":"I_kwDODSlIsc5GeXtS","number":2120,"title":"[QUESTION] How to print multiple lines of text in Layout with Live?","user":{"login":"cassiompf","id":20346767,"node_id":"MDQ6VXNlcjIwMzQ2NzY3","avatar_url":"https://avatars.githubusercontent.com/u/20346767?v=4","gravatar_id":"","url":"https://api.github.com/users/cassiompf","html_url":"https://github.com/cassiompf","followers_url":"https://api.github.com/users/cassiompf/followers","following_url":"https://api.github.com/users/cassiompf/following{/other_user}","gists_url":"https://api.github.com/users/cassiompf/gists{/gist_id}","starred_url":"https://api.github.com/users/cassiompf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cassiompf/subscriptions","organizations_url":"https://api.github.com/users/cassiompf/orgs","repos_url":"https://api.github.com/users/cassiompf/repos","events_url":"https://api.github.com/users/cassiompf/events{/privacy}","received_events_url":"https://api.github.com/users/cassiompf/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-27T05:58:18Z","updated_at":"2022-03-27T05:58:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Folks 👋, Goodnight. I have a question about the use of this library and I would like to know if there is something ready for it or if you know any way to solve it.\r\n\r\nMy question is if it is possible to print my Logs using Layout with the name of \"body\" in my code. I'm using Layout and always updating with Live.\r\n\r\nThe idea I want to do is similar to this gif I saw:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/20346767/160268564-40562825-70f0-4e6f-b33f-2b7e592512b1.gif\" width=\"60%\">\r\n\r\n, where each newest print is displayed at the bottom and the oldest print is removed from the screen by the top of the screen (as if doing an automatic scroll)\r\n\r\n\r\nCurrently my code that I am using to test is like this:\r\n\r\n```python\r\nfrom rich import print\r\nfrom rich.panel import Panel\r\nfrom rich.layout import Layout\r\nfrom rich.console import Console\r\nfrom rich.text import Text\r\nfrom rich.table import Table, Column\r\nfrom rich.live import Live\r\nfrom time import sleep\r\n\r\n\r\nconsole = Console()\r\nconsole.set_alt_screen(True)\r\nconsole.clear()\r\n\r\nlayout = Layout()\r\n\r\nlogs_table = Table(Column(\"Logs\"), expand=True)\r\n\r\nlayout.split_column(\r\n    Layout(name=\"header\", ratio=4),\r\n    Layout(logs_table, name=\"body\", ratio=6)\r\n)\r\n\r\nheader = layout.get('header')\r\n\r\nheader.split_row(\r\n    Layout(Panel(''), name=\"account-info\"),\r\n    Layout(Panel(''), name=\"bot-status-info\")\r\n)\r\n\r\nlive = Live(layout, refresh_per_second=1)\r\nlive_render.start(refresh=True)\r\n\r\nfor i in range(30):\r\n    logs_table.add_row(f'Test line {i}.')\r\n\r\nsleep(5)\r\n```\r\n\r\nThe output result is like:\r\n\r\n<img src=\"https://user-images.githubusercontent.com/20346767/160268770-5943ed95-a0b6-46c1-8b94-1f98ee91f007.gif\" width=\"60%\">\r\n\r\nThe problem is that it displays only the first rows of the table instead of displaying the most recent ones (in this case, the last rows of the table that were inserted)","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2120/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2120/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2119","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2119/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2119/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2119/events","html_url":"https://github.com/Textualize/rich/issues/2119","id":1182126698,"node_id":"I_kwDODSlIsc5GddJq","number":2119,"title":"[REQUEST] Allow setting default parameters for `Console` via environment variables","user":{"login":"joouha","id":12154190,"node_id":"MDQ6VXNlcjEyMTU0MTkw","avatar_url":"https://avatars.githubusercontent.com/u/12154190?v=4","gravatar_id":"","url":"https://api.github.com/users/joouha","html_url":"https://github.com/joouha","followers_url":"https://api.github.com/users/joouha/followers","following_url":"https://api.github.com/users/joouha/following{/other_user}","gists_url":"https://api.github.com/users/joouha/gists{/gist_id}","starred_url":"https://api.github.com/users/joouha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joouha/subscriptions","organizations_url":"https://api.github.com/users/joouha/orgs","repos_url":"https://api.github.com/users/joouha/repos","events_url":"https://api.github.com/users/joouha/events{/privacy}","received_events_url":"https://api.github.com/users/joouha/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-03-26T22:18:30Z","updated_at":"2022-03-27T17:08:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nWhen using `rich` in [`euporie`](https://github.com/joouha/euporie) (a terminal Jupyter notebook client), `rich` detects that it is running in a Jupyter notebook and not running in a TTY, and so returns HTML output.\r\n\r\nHowever, you get a far superior experience when using `rich` in `euporie` by by setting the following `Console` parameters:\r\n\r\n```python\r\nConsole(force_jupyter=False, force_terminal=True)\r\n```\r\n\r\nI'd like to be able to pre-configure `rich` to use these parameters by default when running in `euporie`. \r\n\r\nThe Jupyter kernel in which `rich` runs is a separate process to `euporie`, but will almost always be a sub-process of it. This means that if the default `Console` parameters could be set using environment variables, this would allow me to pre-configure `rich` to give the best user experience when used in `euporie`.\r\n\r\nI'm happy to take stab at implementing this.\r\n\r\nLet me know your thoughts,\r\nThanks\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2119/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2113","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2113/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2113/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2113/events","html_url":"https://github.com/Textualize/rich/pull/2113","id":1181065328,"node_id":"PR_kwDODSlIsc41CB5c","number":2113,"title":"adding indonesian translation for readme","user":{"login":"theDreamer911","id":71202864,"node_id":"MDQ6VXNlcjcxMjAyODY0","avatar_url":"https://avatars.githubusercontent.com/u/71202864?v=4","gravatar_id":"","url":"https://api.github.com/users/theDreamer911","html_url":"https://github.com/theDreamer911","followers_url":"https://api.github.com/users/theDreamer911/followers","following_url":"https://api.github.com/users/theDreamer911/following{/other_user}","gists_url":"https://api.github.com/users/theDreamer911/gists{/gist_id}","starred_url":"https://api.github.com/users/theDreamer911/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theDreamer911/subscriptions","organizations_url":"https://api.github.com/users/theDreamer911/orgs","repos_url":"https://api.github.com/users/theDreamer911/repos","events_url":"https://api.github.com/users/theDreamer911/events{/privacy}","received_events_url":"https://api.github.com/users/theDreamer911/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2022-03-25T17:40:52Z","updated_at":"2022-03-29T21:45:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2113","html_url":"https://github.com/Textualize/rich/pull/2113","diff_url":"https://github.com/Textualize/rich/pull/2113.diff","patch_url":"https://github.com/Textualize/rich/pull/2113.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [ ] Bug fix\r\n- [ ] New feature\r\n- [x] Documentation / docstrings\r\n- [ ] Tests\r\n- [ ] Other\r\n\r\n## Checklist\r\n\r\n- [ ] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [x] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [ ] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nI'm adding Indonesian translation for the readme section\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2113/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2113/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2112","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2112/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2112/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2112/events","html_url":"https://github.com/Textualize/rich/issues/2112","id":1180974993,"node_id":"I_kwDODSlIsc5GZD-R","number":2112,"title":"[BUG] Using status overwrites all previous output when in Jupyter notebook","user":{"login":"ggydush-fn","id":69013027,"node_id":"MDQ6VXNlcjY5MDEzMDI3","avatar_url":"https://avatars.githubusercontent.com/u/69013027?v=4","gravatar_id":"","url":"https://api.github.com/users/ggydush-fn","html_url":"https://github.com/ggydush-fn","followers_url":"https://api.github.com/users/ggydush-fn/followers","following_url":"https://api.github.com/users/ggydush-fn/following{/other_user}","gists_url":"https://api.github.com/users/ggydush-fn/gists{/gist_id}","starred_url":"https://api.github.com/users/ggydush-fn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ggydush-fn/subscriptions","organizations_url":"https://api.github.com/users/ggydush-fn/orgs","repos_url":"https://api.github.com/users/ggydush-fn/repos","events_url":"https://api.github.com/users/ggydush-fn/events{/privacy}","received_events_url":"https://api.github.com/users/ggydush-fn/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-03-25T16:06:13Z","updated_at":"2022-03-26T14:36:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nWhen in a Jupyter notebook, using `status` overwrites all previous output.\r\n\r\n```python\r\nimport time\r\n\r\nfrom rich.console import Console\r\n\r\nprint(\"Previous output\")\r\nconsole = Console()\r\n\r\nwith console.status('This overwrites previous output'):\r\n    time.sleep(2)\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n```\r\n╭────────────────────── <class 'rich.console.Console'> ──────────────────────╮\r\n│ A high level console interface.                                            │\r\n│                                                                            │\r\n│ ╭────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=93 ColorSystem.TRUECOLOR>                               │ │\r\n│ ╰────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                            │\r\n│     color_system = 'truecolor'                                             │\r\n│         encoding = 'utf-8'                                                 │\r\n│             file = <ipykernel.iostream.OutStream object at 0x7f9c0ea1eb20> │\r\n│           height = 100                                                     │\r\n│    is_alt_screen = False                                                   │\r\n│ is_dumb_terminal = False                                                   │\r\n│   is_interactive = False                                                   │\r\n│       is_jupyter = True                                                    │\r\n│      is_terminal = False                                                   │\r\n│   legacy_windows = False                                                   │\r\n│         no_color = False                                                   │\r\n│          options = ConsoleOptions(                                         │\r\n│                        size=ConsoleDimensions(width=93, height=100),       │\r\n│                        legacy_windows=False,                               │\r\n│                        min_width=1,                                        │\r\n│                        max_width=93,                                       │\r\n│                        is_terminal=False,                                  │\r\n│                        encoding='utf-8',                                   │\r\n│                        max_height=100,                                     │\r\n│                        justify=None,                                       │\r\n│                        overflow=None,                                      │\r\n│                        no_wrap=False,                                      │\r\n│                        highlight=None,                                     │\r\n│                        markup=None,                                        │\r\n│                        height=None                                         │\r\n│                    )                                                       │\r\n│            quiet = False                                                   │\r\n│           record = False                                                   │\r\n│         safe_box = True                                                    │\r\n│             size = ConsoleDimensions(width=93, height=100)                 │\r\n│        soft_wrap = False                                                   │\r\n│           stderr = False                                                   │\r\n│            style = None                                                    │\r\n│         tab_size = 8                                                       │\r\n│            width = 93                                                      │\r\n╰────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-color',         │\r\n│     'COLORTERM': None,             │\r\n│     'CLICOLOR': '1',               │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': None,          │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JPY_PARENT_PID': '53',        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Linux\"\r\n```","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2112/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2094","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2094/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2094/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2094/events","html_url":"https://github.com/Textualize/rich/issues/2094","id":1176630480,"node_id":"I_kwDODSlIsc5GIfTQ","number":2094,"title":"[BUG] ASV failed to publish","user":{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false},"assignees":[{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2022-03-22T11:14:46Z","updated_at":"2022-03-29T15:50:01Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"https://github.com/Textualize/rich/actions/runs/2021954439","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2094/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2085","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2085/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2085/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2085/events","html_url":"https://github.com/Textualize/rich/issues/2085","id":1174047564,"node_id":"I_kwDODSlIsc5F-otM","number":2085,"title":"[REQUEST] Would be helpful if `rich.inspect` with `help=True` could format the param list so that it is one param per line to improve readability","user":{"login":"taranlu-houzz","id":52425255,"node_id":"MDQ6VXNlcjUyNDI1MjU1","avatar_url":"https://avatars.githubusercontent.com/u/52425255?v=4","gravatar_id":"","url":"https://api.github.com/users/taranlu-houzz","html_url":"https://github.com/taranlu-houzz","followers_url":"https://api.github.com/users/taranlu-houzz/followers","following_url":"https://api.github.com/users/taranlu-houzz/following{/other_user}","gists_url":"https://api.github.com/users/taranlu-houzz/gists{/gist_id}","starred_url":"https://api.github.com/users/taranlu-houzz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taranlu-houzz/subscriptions","organizations_url":"https://api.github.com/users/taranlu-houzz/orgs","repos_url":"https://api.github.com/users/taranlu-houzz/repos","events_url":"https://api.github.com/users/taranlu-houzz/events{/privacy}","received_events_url":"https://api.github.com/users/taranlu-houzz/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-18T21:27:19Z","updated_at":"2022-03-18T21:27:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**How would you improve Rich?**\r\n\r\nCurrently, `rich.inspect(..., help=True)` prints the definition as a single line. For functions/classes with a large number of parameters, this is unwieldily to read (especially if the docs do not have a nicely formatted param list). Here is an example of what I get for `rich.inspect(click.Command, help=True)` (`click` actually does have good doc strings, but it is just a quick example of a class with many params):\r\n\r\n```\r\n>>> inspect(click.Command, help=True)\r\n╭───────────────────────────────────────────── <class 'click.core.Command'> ──────────────────────────────────────────────╮\r\n│ def Command(name: Union[str, NoneType], context_settings: Union[Dict[str, Any], NoneType] = None, callback:             │\r\n│ Union[Callable[..., Any], NoneType] = None, params: Union[List[ForwardRef('Parameter')], NoneType] = None, help:        │\r\n│ Union[str, NoneType] = None, epilog: Union[str, NoneType] = None, short_help: Union[str, NoneType] = None,              │\r\n│ options_metavar: Union[str, NoneType] = '[OPTIONS]', add_help_option: bool = True, no_args_is_help: bool = False,       │\r\n│ hidden: bool = False, deprecated: bool = False) -> None:                                                                │\r\n│                                                                                                                         │\r\n│ Commands are the basic building block of command line interfaces in                                                     │\r\n│ Click.  A basic command handles command line parsing and might dispatch                                                 │\r\n│ more parsing to commands nested below it.                                                                               │\r\n│                                                                                                                         │\r\n│ .. versionchanged:: 2.0                                                                                                 │\r\n│    Added the `context_settings` parameter.                                                                              │\r\n│ .. versionchanged:: 8.0                                                                                                 │\r\n│    Added repr showing the command name                                                                                  │\r\n│ .. versionchanged:: 7.1                                                                                                 │\r\n│    Added the `no_args_is_help` parameter.                                                                               │\r\n│                                                                                                                         │\r\n│ :param name: the name of the command to use unless a group overrides it.                                                │\r\n│ :param context_settings: an optional dictionary with defaults that are                                                  │\r\n│                          passed to the context object.                                                                  │\r\n│ :param callback: the callback to invoke.  This is optional.                                                             │\r\n│ :param params: the parameters to register with this command.  This can                                                  │\r\n│                be either :class:`Option` or :class:`Argument` objects.                                                  │\r\n│ :param help: the help string to use for this command.                                                                   │\r\n│ :param epilog: like the help string but it's printed at the end of the                                                  │\r\n│                help page after everything else.                                                                         │\r\n│ :param short_help: the short help to use for this command.  This is                                                     │\r\n│                    shown on the command listing of the parent command.                                                  │\r\n│ :param add_help_option: by default each command registers a ``--help``                                                  │\r\n│                         option.  This can be disabled by this parameter.                                                │\r\n│ :param no_args_is_help: this controls what happens if no arguments are                                                  │\r\n│                         provided.  This option is disabled by default.                                                  │\r\n│                         If enabled this will add ``--help`` as argument                                                 │\r\n│                         if no arguments are passed                                                                      │\r\n│ :param hidden: hide this command from help outputs.                                                                     │\r\n│                                                                                                                         │\r\n│ :param deprecated: issues a message indicating that                                                                     │\r\n│                          the command is deprecated.                                                                     │\r\n│                                                                                                                         │\r\n│        allow_extra_args = False                                                                                         │\r\n│ allow_interspersed_args = True                                                                                          │\r\n│  ignore_unknown_options = False                                                                                         │\r\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\r\n>>> \r\n```\r\nI feel like it would be much more readable if the definition was printed the way that `black` would format it:\r\n```python\r\ndef Command(\r\n    name: Union[str, NoneType],\r\n    context_settings: Union[Dict[str, Any], NoneType] = None,\r\n    callback: Union[Callable[..., Any], NoneType] = None,\r\n    params: Union[List[ForwardRef(\"Parameter\")], NoneType] = None,\r\n    help: Union[str, NoneType] = None,\r\n    epilog: Union[str, NoneType] = None,\r\n    short_help: Union[str, NoneType] = None,\r\n    options_metavar: Union[str, NoneType] = \"[OPTIONS]\",\r\n    add_help_option: bool = True,\r\n    no_args_is_help: bool = False,\r\n    hidden: bool = False,\r\n    deprecated: bool = False,\r\n) -> None:\r\n\r\n    ...\r\n```\r\n\r\n**What problem does it solve for you?**\r\n\r\nImproves help clarity for `click.inspect()`, especially when using it to investigate an unfamiliar package or library.\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2085/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2079","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2079/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2079/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2079/events","html_url":"https://github.com/Textualize/rich/issues/2079","id":1173159133,"node_id":"I_kwDODSlIsc5F7Pzd","number":2079,"title":"[BUG]'Alternate screen' on windows 7-10 does not clear after completio (RE)","user":{"login":"snooppr","id":61022210,"node_id":"MDQ6VXNlcjYxMDIyMjEw","avatar_url":"https://avatars.githubusercontent.com/u/61022210?v=4","gravatar_id":"","url":"https://api.github.com/users/snooppr","html_url":"https://github.com/snooppr","followers_url":"https://api.github.com/users/snooppr/followers","following_url":"https://api.github.com/users/snooppr/following{/other_user}","gists_url":"https://api.github.com/users/snooppr/gists{/gist_id}","starred_url":"https://api.github.com/users/snooppr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snooppr/subscriptions","organizations_url":"https://api.github.com/users/snooppr/orgs","repos_url":"https://api.github.com/users/snooppr/repos","events_url":"https://api.github.com/users/snooppr/events{/privacy}","received_events_url":"https://api.github.com/users/snooppr/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-18T03:53:07Z","updated_at":"2022-03-18T03:53:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```\r\nimport time\r\nfrom rich.console import Console\r\n\r\nconsole = Console()\r\n\r\nprint(\"Great_Rich\")\r\n\r\nwith console.screen():\r\n    console.print(\"Banner\")\r\n    time.sleep(2)\r\n\r\nfor i in \"Text\":\r\n    time.sleep(0.04)\r\n    print(f\"\\033[31;1m{i}\", end='', flush=True)\r\nprint(\"\\n\\n exit\")\r\n```\r\n\r\nscreen windows 10\r\nhttps://user-images.githubusercontent.com/61022210/158059480-7fb9b0d6-0ae0-4af8-aefb-1313bdf142b4.png\r\n\r\nI also [compiled](https://disk.yandex.ru/d/JEqpCvFNb5XeuA) this source into an .exe, which is on the screen and in the code\r\n\r\nI tested this on Windows 10 and Windows 7. In both cases, the terminal was not cleared (the word \"Banner\" remained in the terminal). That is, in Windows, the alternative terminal works like a simple \"print\". On GNU/Linux everything works and is in perfect order, please check it out.\r\n\r\np.s. This [project](https://github.com/peterbrittain/asciimatics) here works as an alternative screen on Windows 7 and Windows 10 (the text is cleared after itself).","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2079/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2079/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2073","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2073/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2073/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2073/events","html_url":"https://github.com/Textualize/rich/issues/2073","id":1170823103,"node_id":"I_kwDODSlIsc5FyVe_","number":2073,"title":"[BUG] When pretty-printed, items with a multi-line repr are not indented","user":{"login":"leroyvn","id":34740232,"node_id":"MDQ6VXNlcjM0NzQwMjMy","avatar_url":"https://avatars.githubusercontent.com/u/34740232?v=4","gravatar_id":"","url":"https://api.github.com/users/leroyvn","html_url":"https://github.com/leroyvn","followers_url":"https://api.github.com/users/leroyvn/followers","following_url":"https://api.github.com/users/leroyvn/following{/other_user}","gists_url":"https://api.github.com/users/leroyvn/gists{/gist_id}","starred_url":"https://api.github.com/users/leroyvn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leroyvn/subscriptions","organizations_url":"https://api.github.com/users/leroyvn/orgs","repos_url":"https://api.github.com/users/leroyvn/repos","events_url":"https://api.github.com/users/leroyvn/events{/privacy}","received_events_url":"https://api.github.com/users/leroyvn/received_events","type":"User","site_admin":false},"labels":[{"id":1809645463,"node_id":"MDU6TGFiZWwxODA5NjQ1NDYz","url":"https://api.github.com/repos/Textualize/rich/labels/accepted","name":"accepted","color":"c5def5","default":false,"description":"Task was accepted"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-16T10:26:40Z","updated_at":"2022-03-16T10:52:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\n*Not entirely sure if it's a proper bug or a won't fix, but at least getting an answer would be great.*\r\n\r\n**Context:** I'm using Rich to display nicely a hierarchy of `attrs`-powered objects using `rich.pretty.pprint()`. This works very well and Rich saves me a lot of trouble when visually inspecting those objects.\r\n\r\nSome of the fields in my objects consist of Numpy or xarray data whose repr may span accros multiple lines. Here is an example:\r\n\r\n```python\r\nimport numpy as np\r\nfrom rich.pretty import pprint\r\nzeros = np.zeros((4,4))\r\npprint(zeros)\r\n```\r\nI get a nicely indented repr:\r\n```\r\narray([[0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.]])\r\n```\r\nNow, if I use one of these in a dictionary, like this\r\n```python\r\nd = {\"foo\": \"bar\", \"zeros\": zeros}\r\npprint(d)\r\n```\r\nI get that\r\n```\r\n{\r\n│   'foo': 'bar',\r\n│   'zeros': array([[0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.],\r\n│      [0., 0., 0., 0.]])\r\n}\r\n```\r\nwhile I'd expect indentation to be adjusted like this\r\n```\r\n{\r\n│   'foo': 'bar',\r\n│   'zeros': array([[0., 0., 0., 0.],\r\n│                   [0., 0., 0., 0.],\r\n│                   [0., 0., 0., 0.],\r\n│                   [0., 0., 0., 0.]])\r\n}\r\n```\r\nor at least something like this (saves horizontal space, no need to guess length of first line)\r\n```\r\n{\r\n│   'foo': 'bar',\r\n│   'zeros': \r\n|   |   array([[0., 0., 0., 0.],\r\n│   |          [0., 0., 0., 0.],\r\n│   |          [0., 0., 0., 0.],\r\n│   |          [0., 0., 0., 0.]])\r\n}\r\n```\r\nI'm showing here an example with a dict, but this also applies when pretty printing `attrs` objects with fields containing Numpy or xarray data.\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n**Platform**: macOS, Linux\r\n**Rich version**: 12.0.0\r\n**Output**: Terminal, PyCharm and VSCode embedded consoles, Jupyter Lab (intentionally not cluttering the issue with terminal info, I can add them if it's relevant)\r\n\r\n</details>\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2073/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2073/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2047","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2047/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2047/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2047/events","html_url":"https://github.com/Textualize/rich/issues/2047","id":1165695634,"node_id":"I_kwDODSlIsc5FexqS","number":2047,"title":"[BUG] printing -\\n- in rich.progress context manager will kill the jupyter.","user":{"login":"kkasra12","id":24565544,"node_id":"MDQ6VXNlcjI0NTY1NTQ0","avatar_url":"https://avatars.githubusercontent.com/u/24565544?v=4","gravatar_id":"","url":"https://api.github.com/users/kkasra12","html_url":"https://github.com/kkasra12","followers_url":"https://api.github.com/users/kkasra12/followers","following_url":"https://api.github.com/users/kkasra12/following{/other_user}","gists_url":"https://api.github.com/users/kkasra12/gists{/gist_id}","starred_url":"https://api.github.com/users/kkasra12/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kkasra12/subscriptions","organizations_url":"https://api.github.com/users/kkasra12/orgs","repos_url":"https://api.github.com/users/kkasra12/repos","events_url":"https://api.github.com/users/kkasra12/events{/privacy}","received_events_url":"https://api.github.com/users/kkasra12/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-10T20:39:33Z","updated_at":"2022-03-10T21:16:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"try this code in the jupyter notebook:\r\n\r\n```python\r\nfrom rich.progress import Progress\r\nwith Progress() as progress:\r\n    print(\"-\\n-\")\r\nprint(\"finished\")\r\n```\r\nand it will show a popup message displaying that the kernel has died.\r\nI have tested it on google colab and mint.\r\n\r\nalso, I have installed rich using\r\n```\r\npip install rich[jupyter]\r\n```","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2047/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2047/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2046","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2046/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2046/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2046/events","html_url":"https://github.com/Textualize/rich/issues/2046","id":1165354945,"node_id":"I_kwDODSlIsc5FdefB","number":2046,"title":"The process gets stuck (in a deadlock?) when using the RichHandler for logging","user":{"login":"ivanprado","id":895720,"node_id":"MDQ6VXNlcjg5NTcyMA==","avatar_url":"https://avatars.githubusercontent.com/u/895720?v=4","gravatar_id":"","url":"https://api.github.com/users/ivanprado","html_url":"https://github.com/ivanprado","followers_url":"https://api.github.com/users/ivanprado/followers","following_url":"https://api.github.com/users/ivanprado/following{/other_user}","gists_url":"https://api.github.com/users/ivanprado/gists{/gist_id}","starred_url":"https://api.github.com/users/ivanprado/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivanprado/subscriptions","organizations_url":"https://api.github.com/users/ivanprado/orgs","repos_url":"https://api.github.com/users/ivanprado/repos","events_url":"https://api.github.com/users/ivanprado/events{/privacy}","received_events_url":"https://api.github.com/users/ivanprado/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-10T15:13:53Z","updated_at":"2022-03-21T11:22:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nI'm running a multiprocessing + multithreading app, and I was using the `RichHandler`. The process is a long-running process, and it always got stuck at some point. I was analyzing the dumped stack when the process got in this state using `py-spy` and I got to the conclusion that the problem is that the `RichHandler` gets stuck in this line: https://github.com/Textualize/rich/blob/v11.0.0/rich/live.py#L246\r\n\r\nIf I remove the `RichHandler` then I don't experience the problem anymore.\r\n\r\nThis is part of a stack trace of the thread that gets stuck (I removed some calls):\r\n\r\n```\r\n    process_renderables (rich/live.py:246)\r\n    print (rich/console.py:1600)\r\n    emit (rich/logging.py:154)\r\n    handle (logging/__init__.py:954)\r\n    callHandlers (logging/__init__.py:1661)\r\n    handle (logging/__init__.py:1599)\r\n    _log (logging/__init__.py:1589)\r\n    log (logging/__init__.py:1512)\r\n    log_it (tenacity/before_sleep.py:51)\r\n    iter (tenacity/__init__.py:373)\r\n    __call__ (tenacity/_asyncio.py:48)\r\n    async_wrapped (tenacity/_asyncio.py:86)\r\n    ...\r\n    _run (asyncio/events.py:81)\r\n    _run_once (asyncio/base_events.py:1859)\r\n    run_forever (asyncio/base_events.py:570)\r\n    run_until_complete (asyncio/base_events.py:603)\r\n    run (asyncio/runners.py:44)\r\n   ... \r\n    run (threading.py:870)\r\n    _bootstrap_inner (threading.py:932)\r\n    _bootstrap (threading.py:890)\r\n```\r\n\r\nAs I told you, the app is using multiprocessing and multithreading and also using rich progress and rich in other parts without problems. It is only the `RichHandler` the one causing troubles. \r\n\r\nUnfortunately, I have no more details. Probably what I gave you is not enough, but well, I just wanted to share in case you get inspired about what could be happening. \r\n\r\n**Platform**\r\nLinux with fish cmd\r\n\r\n```\r\npython -m rich.diagnose\r\n\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=214 ColorSystem.STANDARD>                                     │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'standard'                                                    │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 45                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=214, height=45),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=214,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=45,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=214, height=45)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 214                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n\r\npip freeze | grep rich\r\n\r\nrich==11.0.0\r\n```\r\n\r\nTo finish, thank you very much for Rich. It is an amazing library!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2046/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2018","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2018/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2018/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2018/events","html_url":"https://github.com/Textualize/rich/issues/2018","id":1158314591,"node_id":"I_kwDODSlIsc5FCnpf","number":2018,"title":"[BUG] rich.traceback: no lexer for filename X found","user":{"login":"pbsds","id":140964,"node_id":"MDQ6VXNlcjE0MDk2NA==","avatar_url":"https://avatars.githubusercontent.com/u/140964?v=4","gravatar_id":"","url":"https://api.github.com/users/pbsds","html_url":"https://github.com/pbsds","followers_url":"https://api.github.com/users/pbsds/followers","following_url":"https://api.github.com/users/pbsds/following{/other_user}","gists_url":"https://api.github.com/users/pbsds/gists{/gist_id}","starred_url":"https://api.github.com/users/pbsds/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pbsds/subscriptions","organizations_url":"https://api.github.com/users/pbsds/orgs","repos_url":"https://api.github.com/users/pbsds/repos","events_url":"https://api.github.com/users/pbsds/events{/privacy}","received_events_url":"https://api.github.com/users/pbsds/received_events","type":"User","site_admin":false},"labels":[{"id":1668492270,"node_id":"MDU6TGFiZWwxNjY4NDkyMjcw","url":"https://api.github.com/repos/Textualize/rich/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"open","locked":false,"assignee":{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false},"assignees":[{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-03-03T11:49:17Z","updated_at":"2022-03-30T11:16:45Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nThe rich.traceback doesn't know how to render tracebacks originating from inside jinja2 templates.\r\nThe issue is twofold: (1) rich doesn't recognize the `.yaml.j2` extension as `jinja2+yaml`,  and (2) the fallback isn't to print the file contents without highlighting but instead to **simply not print it at all**.\r\nAs such this bug likely also affects other languages to compile to python bytecode, such as [dg](http://pyos.github.io/dg/), [Hylang](https://docs.hylang.org/en/stable/) and [hissp/hebigo](https://github.com/gilch/hissp).\r\n\r\nRepro:\r\n\r\ntest.py:\r\n```python\r\nimport jinja2, os\r\nfrom rich.traceback import install\r\ninstall()\r\ndef raiser():\r\n    raise Exception\r\nenv = jinja2.Environment(\r\n    loader = jinja2.FileSystemLoader([os.getcwd(), \"/\"], followlinks=True),\r\n)\r\nenv.globals[\"raiser\"] = raiser    \r\ntemplate = env.get_template(\"test.yaml.j2\")\r\nprint(template.render())\r\n```\r\ntest.yaml.j2:\r\n```jinja2\r\nfoobar:\r\n    something: {{ raiser() }}\r\n    else: {{ 5 + 5 }}\r\n```\r\n\r\nVanilla traceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/pbsds/tmp/repro/test.py\", line 13, in <module>\r\n    print(template.render())\r\n  File \"/usr/lib/python3.10/site-packages/jinja2/environment.py\", line 1291, in render\r\n    self.environment.handle_exception()\r\n  File \"/usr/lib/python3.10/site-packages/jinja2/environment.py\", line 925, in handle_exception\r\n    raise rewrite_traceback_stack(source=source)\r\n  File \"/home/pbsds/tmp/repro/test.yaml.j2\", line 2, in top-level template code\r\n    something: {{ raiser() }}\r\n  File \"/home/pbsds/tmp/repro/test.py\", line 4, in raiser\r\n    raise Exception\r\nException\r\n```\r\n\r\nrich.traceback:\r\n```\r\n╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮\r\n│                                                                                                  │\r\n│ /home/pbsds/tmp/repro/test.py:15 in <module>                                                     │\r\n│                                                                                                  │\r\n│   12                                                                                             │\r\n│   13 template = env.get_template(\"test.yaml.j2\")                                                 │\r\n│   14                                                                                             │\r\n│ ❱ 15 print(template.render())                                                                    │\r\n│   16                                                                                             │\r\n│ /usr/lib/python3.10/site-packages/jinja2/environment.py:1291 in render                           │\r\n│                                                                                                  │\r\n│   1288 │   │   try:                                                                              │\r\n│   1289 │   │   │   return concat(self.root_render_func(ctx))  # type: ignore                     │\r\n│   1290 │   │   except Exception:                                                                 │\r\n│ ❱ 1291 │   │   │   self.environment.handle_exception()                                           │\r\n│   1292 │                                                                                         │\r\n│   1293 │   async def render_async(self, *args: t.Any, **kwargs: t.Any) -> str:                   │\r\n│   1294 │   │   \"\"\"This works similar to :meth:`render` but returns a coroutine                   │\r\n│                                                                                                  │\r\n│ /usr/lib/python3.10/site-packages/jinja2/environment.py:925 in handle_exception                  │\r\n│                                                                                                  │\r\n│    922 │   │   \"\"\"                                                                               │\r\n│    923 │   │   from .debug import rewrite_traceback_stack                                        │\r\n│    924 │   │                                                                                     │\r\n│ ❱  925 │   │   raise rewrite_traceback_stack(source=source)                                      │\r\n│    926 │                                                                                         │\r\n│    927 │   def join_path(self, template: str, parent: str) -> str:                               │\r\n│    928 │   │   \"\"\"Join a template with the parent.  By default all the lookups are               │\r\n│                                                                                                  │\r\n│ /home/pbsds/tmp/repro/test.yaml.j2:2 in top-level template code                                  │\r\n│                                                                                                  │\r\n│ no lexer for filename 'test.yaml.j2' found                                                       │\r\n│                                                                                                  │\r\n│ /home/pbsds/tmp/repro/test.py:6 in raiser                                                        │\r\n│                                                                                                  │\r\n│    3 install()                                                                                   │\r\n│    4                                                                                             │\r\n│    5 def raiser():                                                                               │\r\n│ ❱  6 │   raise Exception                                                                         │\r\n│    7                                                                                             │\r\n│    8 env = jinja2.Environment(                                                                   │\r\n│    9 │   loader = jinja2.FileSystemLoader([os.getcwd(), \"/\"], followlinks=True),                 │\r\n╰──────────────────────────────────────────────────────────────────────────────────────────────────╯\r\n```\r\n\r\n\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nManjaro GNOME, python 3.10.2, lxterminal\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\n╭─────────────────────── <class 'rich.console.Console'> ───────────────────────╮\r\n│ A high level console interface.                                              │\r\n│                                                                              │\r\n│ ╭──────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=80 ColorSystem.TRUECOLOR>                                 │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                              │\r\n│     color_system = 'truecolor'                                               │\r\n│         encoding = 'utf-8'                                                   │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w'               │\r\n│                    encoding='utf-8'>                                         │\r\n│           height = 24                                                        │\r\n│    is_alt_screen = False                                                     │\r\n│ is_dumb_terminal = False                                                     │\r\n│   is_interactive = True                                                      │\r\n│       is_jupyter = False                                                     │\r\n│      is_terminal = True                                                      │\r\n│   legacy_windows = False                                                     │\r\n│         no_color = False                                                     │\r\n│          options = ConsoleOptions(                                           │\r\n│                        size=ConsoleDimensions(width=80, height=24),          │\r\n│                        legacy_windows=False,                                 │\r\n│                        min_width=1,                                          │\r\n│                        max_width=80,                                         │\r\n│                        is_terminal=True,                                     │\r\n│                        encoding='utf-8',                                     │\r\n│                        max_height=24,                                        │\r\n│                        justify=None,                                         │\r\n│                        overflow=None,                                        │\r\n│                        no_wrap=False,                                        │\r\n│                        highlight=None,                                       │\r\n│                        markup=None,                                          │\r\n│                        height=None                                           │\r\n│                    )                                                         │\r\n│            quiet = False                                                     │\r\n│           record = False                                                     │\r\n│         safe_box = True                                                      │\r\n│             size = ConsoleDimensions(width=80, height=24)                    │\r\n│        soft_wrap = False                                                     │\r\n│           stderr = False                                                     │\r\n│            style = None                                                      │\r\n│         tab_size = 8                                                         │\r\n│            width = 80                                                        │\r\n╰──────────────────────────────────────────────────────────────────────────────╯\r\nrich==11.0.0\r\n```\r\n\r\n</details>\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2018/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/2013","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/2013/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/2013/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/2013/events","html_url":"https://github.com/Textualize/rich/pull/2013","id":1154379768,"node_id":"PR_kwDODSlIsc4zrfT1","number":2013,"title":"Add the `log_omit_repeated_times` option to `Console`","user":{"login":"apcamargo","id":22940964,"node_id":"MDQ6VXNlcjIyOTQwOTY0","avatar_url":"https://avatars.githubusercontent.com/u/22940964?v=4","gravatar_id":"","url":"https://api.github.com/users/apcamargo","html_url":"https://github.com/apcamargo","followers_url":"https://api.github.com/users/apcamargo/followers","following_url":"https://api.github.com/users/apcamargo/following{/other_user}","gists_url":"https://api.github.com/users/apcamargo/gists{/gist_id}","starred_url":"https://api.github.com/users/apcamargo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apcamargo/subscriptions","organizations_url":"https://api.github.com/users/apcamargo/orgs","repos_url":"https://api.github.com/users/apcamargo/repos","events_url":"https://api.github.com/users/apcamargo/events{/privacy}","received_events_url":"https://api.github.com/users/apcamargo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-28T17:49:12Z","updated_at":"2022-03-28T15:31:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/2013","html_url":"https://github.com/Textualize/rich/pull/2013","diff_url":"https://github.com/Textualize/rich/pull/2013.diff","patch_url":"https://github.com/Textualize/rich/pull/2013.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [ ] Bug fix\r\n- [x] New feature\r\n- [ ] Documentation / docstrings\r\n- [ ] Tests\r\n- [ ] Other\r\n\r\n## Checklist\r\n\r\n- [x] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [x] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [ ] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nThis PR adds a `log_omit_repeated_times` option to the `Console` constructor. When set to `False`, the omission of repeated times by `log()` methods is disabled.\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/2013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/2013/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1997","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1997/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1997/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1997/events","html_url":"https://github.com/Textualize/rich/issues/1997","id":1149142916,"node_id":"I_kwDODSlIsc5EfoeE","number":1997,"title":"CONTRIBUTING.md guidlines inadequate","user":{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},"labels":[{"id":1668492271,"node_id":"MDU6TGFiZWwxNjY4NDkyMjcx","url":"https://api.github.com/repos/Textualize/rich/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"}],"state":"open","locked":false,"assignee":{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},"assignees":[{"login":"willmcgugan","id":554369,"node_id":"MDQ6VXNlcjU1NDM2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/554369?v=4","gravatar_id":"","url":"https://api.github.com/users/willmcgugan","html_url":"https://github.com/willmcgugan","followers_url":"https://api.github.com/users/willmcgugan/followers","following_url":"https://api.github.com/users/willmcgugan/following{/other_user}","gists_url":"https://api.github.com/users/willmcgugan/gists{/gist_id}","starred_url":"https://api.github.com/users/willmcgugan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willmcgugan/subscriptions","organizations_url":"https://api.github.com/users/willmcgugan/orgs","repos_url":"https://api.github.com/users/willmcgugan/repos","events_url":"https://api.github.com/users/willmcgugan/events{/privacy}","received_events_url":"https://api.github.com/users/willmcgugan/received_events","type":"User","site_admin":false},{"login":"darrenburns","id":5740731,"node_id":"MDQ6VXNlcjU3NDA3MzE=","avatar_url":"https://avatars.githubusercontent.com/u/5740731?v=4","gravatar_id":"","url":"https://api.github.com/users/darrenburns","html_url":"https://github.com/darrenburns","followers_url":"https://api.github.com/users/darrenburns/followers","following_url":"https://api.github.com/users/darrenburns/following{/other_user}","gists_url":"https://api.github.com/users/darrenburns/gists{/gist_id}","starred_url":"https://api.github.com/users/darrenburns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/darrenburns/subscriptions","organizations_url":"https://api.github.com/users/darrenburns/orgs","repos_url":"https://api.github.com/users/darrenburns/repos","events_url":"https://api.github.com/users/darrenburns/events{/privacy}","received_events_url":"https://api.github.com/users/darrenburns/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2022-02-24T10:57:00Z","updated_at":"2022-02-24T10:57:19Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"We should review and update CONTRIBUTING.md from the point of view of a beginner starting afresh.","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1997/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1997/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1978","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1978/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1978/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1978/events","html_url":"https://github.com/Textualize/rich/issues/1978","id":1143127849,"node_id":"I_kwDODSlIsc5EIr8p","number":1978,"title":"[QUESTION] How to save_html while using Progress","user":{"login":"AnthoBalitrand","id":24936333,"node_id":"MDQ6VXNlcjI0OTM2MzMz","avatar_url":"https://avatars.githubusercontent.com/u/24936333?v=4","gravatar_id":"","url":"https://api.github.com/users/AnthoBalitrand","html_url":"https://github.com/AnthoBalitrand","followers_url":"https://api.github.com/users/AnthoBalitrand/followers","following_url":"https://api.github.com/users/AnthoBalitrand/following{/other_user}","gists_url":"https://api.github.com/users/AnthoBalitrand/gists{/gist_id}","starred_url":"https://api.github.com/users/AnthoBalitrand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AnthoBalitrand/subscriptions","organizations_url":"https://api.github.com/users/AnthoBalitrand/orgs","repos_url":"https://api.github.com/users/AnthoBalitrand/repos","events_url":"https://api.github.com/users/AnthoBalitrand/events{/privacy}","received_events_url":"https://api.github.com/users/AnthoBalitrand/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-18T14:07:24Z","updated_at":"2022-02-22T19:20:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Need some help here if possible : \r\nhow to render a readable output using console.save_html() while having Progress objects ? \r\n\r\nThe Progress outputs are also wrote on the html (which makes it unreadable), while I would like to export only logged stuff. \r\n\r\nThanks for your help !","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1978/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1918","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1918/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1918/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1918/events","html_url":"https://github.com/Textualize/rich/pull/1918","id":1124571706,"node_id":"PR_kwDODSlIsc4yGiXY","number":1918,"title":"Fixed force_terminal on Jupyter","user":{"login":"verdimrc","id":2340781,"node_id":"MDQ6VXNlcjIzNDA3ODE=","avatar_url":"https://avatars.githubusercontent.com/u/2340781?v=4","gravatar_id":"","url":"https://api.github.com/users/verdimrc","html_url":"https://github.com/verdimrc","followers_url":"https://api.github.com/users/verdimrc/followers","following_url":"https://api.github.com/users/verdimrc/following{/other_user}","gists_url":"https://api.github.com/users/verdimrc/gists{/gist_id}","starred_url":"https://api.github.com/users/verdimrc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/verdimrc/subscriptions","organizations_url":"https://api.github.com/users/verdimrc/orgs","repos_url":"https://api.github.com/users/verdimrc/repos","events_url":"https://api.github.com/users/verdimrc/events{/privacy}","received_events_url":"https://api.github.com/users/verdimrc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-04T20:03:59Z","updated_at":"2022-02-27T10:57:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/Textualize/rich/pulls/1918","html_url":"https://github.com/Textualize/rich/pull/1918","diff_url":"https://github.com/Textualize/rich/pull/1918.diff","patch_url":"https://github.com/Textualize/rich/pull/1918.patch","merged_at":null},"body":"## Type of changes\r\n\r\n- [x] Bug fix\r\n- [ ] New feature\r\n- [ ] Documentation / docstrings\r\n- [ ] Tests\r\n- [ ] Other\r\n\r\n## Checklist\r\n\r\n- [x] I've run the latest [black](https://github.com/psf/black) with default args on new code.\r\n- [ ] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.\r\n- [ ] I've added tests for new code.\r\n- [x] I accept that @willmcgugan may be pedantic in the code review.\r\n\r\n## Description\r\n\r\nPlease describe your changes here. If this fixes a bug, please link to the issue, if possible.\r\n\r\nFixes behavior after running `rich.pretty.install()` Jupyter Lab:\r\n\r\n- Do not show `<Figure size 432x288 with 1 Axes>` on Matplotlib figures\r\n- With `force_terminal=True`. and `force_jupyter=None` (or `True`), pandas dataframe must still be rendered once (i.e., the html repr).\r\n\r\nScreenshot below (from this [notebook](https://gist.github.com/verdimrc/221f602a90b6c0733cb29c8d665ad674)) compares the four behaviors: (1) vanilla Python, (2 and 3) rich, and (4) this PR.\r\n\r\n![screenshot](https://user-images.githubusercontent.com/2340781/154830727-6ac50554-4cfa-4281-83cb-02ad3f6e52db.png)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1918/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1906","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1906/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1906/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1906/events","html_url":"https://github.com/Textualize/rich/issues/1906","id":1122332007,"node_id":"I_kwDODSlIsc5C5W1n","number":1906,"title":"[REQUEST] Optional RichHandler Keywords","user":{"login":"aaronst","id":7453602,"node_id":"MDQ6VXNlcjc0NTM2MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7453602?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronst","html_url":"https://github.com/aaronst","followers_url":"https://api.github.com/users/aaronst/followers","following_url":"https://api.github.com/users/aaronst/following{/other_user}","gists_url":"https://api.github.com/users/aaronst/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronst/subscriptions","organizations_url":"https://api.github.com/users/aaronst/orgs","repos_url":"https://api.github.com/users/aaronst/repos","events_url":"https://api.github.com/users/aaronst/events{/privacy}","received_events_url":"https://api.github.com/users/aaronst/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-02T20:00:35Z","updated_at":"2022-02-04T13:32:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**How would you improve Rich?**\r\n\r\nCurrently, `RichHandler.KEYWORDS` is a class variable containing common HTTP methods.\r\nhttps://github.com/Textualize/rich/blob/94273ee7030be773542110c0c70809535a08c6eb/rich/logging.py#L46-L55\r\n\r\nIt would be cool if `RichHandler()` had an optional `keywords` parameter that allowed for a custom set of keywords.\r\n\r\nI'd be happy to submit a PR for this, let me know!","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1906/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1903","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1903/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1903/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1903/events","html_url":"https://github.com/Textualize/rich/issues/1903","id":1120514261,"node_id":"I_kwDODSlIsc5CybDV","number":1903,"title":"[BUG] Thread race tracking bug","user":{"login":"GBeauregard","id":1444900,"node_id":"MDQ6VXNlcjE0NDQ5MDA=","avatar_url":"https://avatars.githubusercontent.com/u/1444900?v=4","gravatar_id":"","url":"https://api.github.com/users/GBeauregard","html_url":"https://github.com/GBeauregard","followers_url":"https://api.github.com/users/GBeauregard/followers","following_url":"https://api.github.com/users/GBeauregard/following{/other_user}","gists_url":"https://api.github.com/users/GBeauregard/gists{/gist_id}","starred_url":"https://api.github.com/users/GBeauregard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GBeauregard/subscriptions","organizations_url":"https://api.github.com/users/GBeauregard/orgs","repos_url":"https://api.github.com/users/GBeauregard/repos","events_url":"https://api.github.com/users/GBeauregard/events{/privacy}","received_events_url":"https://api.github.com/users/GBeauregard/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-01T10:57:17Z","updated_at":"2022-02-01T10:57:17Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nThis is a tracking bug for #1530 \r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1903/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1888","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1888/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1888/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1888/events","html_url":"https://github.com/Textualize/rich/issues/1888","id":1118739805,"node_id":"I_kwDODSlIsc5Crp1d","number":1888,"title":"Extra output in progress bars running on jupyter notebooks. ","user":{"login":"tylerflex","id":92756888,"node_id":"U_kgDOBYdbmA","avatar_url":"https://avatars.githubusercontent.com/u/92756888?v=4","gravatar_id":"","url":"https://api.github.com/users/tylerflex","html_url":"https://github.com/tylerflex","followers_url":"https://api.github.com/users/tylerflex/followers","following_url":"https://api.github.com/users/tylerflex/following{/other_user}","gists_url":"https://api.github.com/users/tylerflex/gists{/gist_id}","starred_url":"https://api.github.com/users/tylerflex/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tylerflex/subscriptions","organizations_url":"https://api.github.com/users/tylerflex/orgs","repos_url":"https://api.github.com/users/tylerflex/repos","events_url":"https://api.github.com/users/tylerflex/events{/privacy}","received_events_url":"https://api.github.com/users/tylerflex/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-30T22:29:03Z","updated_at":"2022-01-31T16:24:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nI have a simple progressbar running in a jupyter notebook.\r\n\r\n```\r\nfrom rich.progress import track\r\n\r\nfor n in track(range(10), description=\"Processing...\"):\r\n    time.sleep(.1)\r\n```\r\n\r\nWhen the progressbar exists, the final state is displayed along with the updating progressbar, creating a duplicate\r\n\r\n<img width=\"510\" alt=\"image\" src=\"https://user-images.githubusercontent.com/92756888/151720512-0b0c8753-5a8e-44b3-b284-fc0d62d81837.png\">\r\n\r\nIs there a recommended way to have the final display replace the updating display?  Note: works as expected in interactive ipython shell or script.\r\n\r\nThank you!\r\n\r\n```\r\n╭────────────────── <class 'rich.console.Console'> ───────────────────╮\r\n│ A high level console interface.                                     │\r\n│                                                                     │\r\n│ ╭─────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=71 ColorSystem.TRUECOLOR>                        │ │\r\n│ ╰─────────────────────────────────────────────────────────────────╯ │\r\n│                                                                     │\r\n│     color_system = 'truecolor'                                      │\r\n│         encoding = 'utf-8'                                          │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w'      │\r\n│                    encoding='utf-8'>                                │\r\n│           height = 51                                               │\r\n│    is_alt_screen = False                                            │\r\n│ is_dumb_terminal = False                                            │\r\n│   is_interactive = True                                             │\r\n│       is_jupyter = False                                            │\r\n│      is_terminal = True                                             │\r\n│   legacy_windows = False                                            │\r\n│         no_color = False                                            │\r\n│          options = ConsoleOptions(                                  │\r\n│                        size=ConsoleDimensions(width=71, height=51), │\r\n│                        legacy_windows=False,                        │\r\n│                        min_width=1,                                 │\r\n│                        max_width=71,                                │\r\n│                        is_terminal=True,                            │\r\n│                        encoding='utf-8',                            │\r\n│                        max_height=51,                               │\r\n│                        justify=None,                                │\r\n│                        overflow=None,                               │\r\n│                        no_wrap=False,                               │\r\n│                        highlight=None,                              │\r\n│                        markup=None,                                 │\r\n│                        height=None                                  │\r\n│                    )                                                │\r\n│            quiet = False                                            │\r\n│           record = False                                            │\r\n│         safe_box = True                                             │\r\n│             size = ConsoleDimensions(width=71, height=51)           │\r\n│        soft_wrap = False                                            │\r\n│           stderr = False                                            │\r\n│            style = None                                             │\r\n│         tab_size = 8                                                │\r\n│            width = 71                                               │\r\n╰─────────────────────────────────────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\nWindowsConsoleFeatures(vt=False, truecolor=False)\r\nrich==11.0.0\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1888/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1877","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1877/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1877/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1877/events","html_url":"https://github.com/Textualize/rich/issues/1877","id":1117230210,"node_id":"I_kwDODSlIsc5Cl5SC","number":1877,"title":"[BUG] rich.progress should fallback to use ─ instead of -","user":{"login":"pcroland","id":11183274,"node_id":"MDQ6VXNlcjExMTgzMjc0","avatar_url":"https://avatars.githubusercontent.com/u/11183274?v=4","gravatar_id":"","url":"https://api.github.com/users/pcroland","html_url":"https://github.com/pcroland","followers_url":"https://api.github.com/users/pcroland/followers","following_url":"https://api.github.com/users/pcroland/following{/other_user}","gists_url":"https://api.github.com/users/pcroland/gists{/gist_id}","starred_url":"https://api.github.com/users/pcroland/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcroland/subscriptions","organizations_url":"https://api.github.com/users/pcroland/orgs","repos_url":"https://api.github.com/users/pcroland/repos","events_url":"https://api.github.com/users/pcroland/events{/privacy}","received_events_url":"https://api.github.com/users/pcroland/received_events","type":"User","site_admin":false},"labels":[{"id":1809645463,"node_id":"MDU6TGFiZWwxODA5NjQ1NDYz","url":"https://api.github.com/repos/Textualize/rich/labels/accepted","name":"accepted","color":"c5def5","default":false,"description":"Task was accepted"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-01-28T10:20:30Z","updated_at":"2022-02-18T11:32:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"So I use wsltty mainly where rich.progress uses the `━━` character for the progress bar. I checked it in cmd.exe and it showed `--` for the progress bar. The fallback should be `──` (also used in tables), it would give a connected line.\r\n![img](https://i.kek.sh/4Sy5TIB4O6n.png)\r\n\r\nbtw: is there any terminal that does not support the `━` character?","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1877/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1870","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1870/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1870/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1870/events","html_url":"https://github.com/Textualize/rich/issues/1870","id":1114424978,"node_id":"I_kwDODSlIsc5CbMaS","number":1870,"title":"[BUG] Rich is not using the full width of the Jupyter notebook","user":{"login":"saiwing-yeung","id":12464429,"node_id":"MDQ6VXNlcjEyNDY0NDI5","avatar_url":"https://avatars.githubusercontent.com/u/12464429?v=4","gravatar_id":"","url":"https://api.github.com/users/saiwing-yeung","html_url":"https://github.com/saiwing-yeung","followers_url":"https://api.github.com/users/saiwing-yeung/followers","following_url":"https://api.github.com/users/saiwing-yeung/following{/other_user}","gists_url":"https://api.github.com/users/saiwing-yeung/gists{/gist_id}","starred_url":"https://api.github.com/users/saiwing-yeung/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/saiwing-yeung/subscriptions","organizations_url":"https://api.github.com/users/saiwing-yeung/orgs","repos_url":"https://api.github.com/users/saiwing-yeung/repos","events_url":"https://api.github.com/users/saiwing-yeung/events{/privacy}","received_events_url":"https://api.github.com/users/saiwing-yeung/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-25T22:28:00Z","updated_at":"2022-01-27T15:15:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Rich is not using the full width of the Jupyter notebook.\r\n\r\nFor example, here I expect the lines for `index` and `sort` to be both fit on one line.\r\n\r\n![image](https://user-images.githubusercontent.com/12464429/151069934-e3c7f8cb-8e88-4aec-b684-be3f6609361f.png)\r\n\r\nI am not sure if this is the same issue as [this](https://github.com/Textualize/rich/issues/504). If it is, is there a way I can manually set the width (I'd do it at the beginning of the notebook)? Thanks!\r\n\r\nIt works fine on IPython in the terminal though.\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nMac; Jupyter\r\n\r\nI may ask you to cut and paste the output of the following commands. It may save some time if you do it now.\r\n\r\n```\r\npython -m rich.diagnose\r\npython -m rich._windows\r\npip freeze | grep rich\r\n```\r\n \r\n```\r\n╭─────────────────────── <class 'rich.console.Console'> ───────────────────────╮\r\n│ A high level console interface.                                              │\r\n│                                                                              │\r\n│ ╭──────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=80 ColorSystem.TRUECOLOR>                                 │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                              │\r\n│     color_system = 'truecolor'                                               │\r\n│         encoding = 'utf-8'                                                   │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w'               │\r\n│                    encoding='utf-8'>                                         │\r\n│           height = 24                                                        │\r\n│    is_alt_screen = False                                                     │\r\n│ is_dumb_terminal = False                                                     │\r\n│   is_interactive = True                                                      │\r\n│       is_jupyter = False                                                     │\r\n│      is_terminal = True                                                      │\r\n│   legacy_windows = False                                                     │\r\n│         no_color = False                                                     │\r\n│          options = ConsoleOptions(                                           │\r\n│                        size=ConsoleDimensions(width=80, height=24),          │\r\n│                        legacy_windows=False,                                 │\r\n│                        min_width=1,                                          │\r\n│                        max_width=80,                                         │\r\n│                        is_terminal=True,                                     │\r\n│                        encoding='utf-8',                                     │\r\n│                        max_height=24,                                        │\r\n│                        justify=None,                                         │\r\n│                        overflow=None,                                        │\r\n│                        no_wrap=False,                                        │\r\n│                        highlight=None,                                       │\r\n│                        markup=None,                                          │\r\n│                        height=None                                           │\r\n│                    )                                                         │\r\n│            quiet = False                                                     │\r\n│           record = False                                                     │\r\n│         safe_box = True                                                      │\r\n│             size = ConsoleDimensions(width=80, height=24)                    │\r\n│        soft_wrap = False                                                     │\r\n│           stderr = False                                                     │\r\n│            style = None                                                      │\r\n│         tab_size = 8                                                         │\r\n│            width = 80                                                        │\r\n╰──────────────────────────────────────────────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\nWindowsConsoleFeatures(vt=False, truecolor=False)\r\nrich @ file:///home/conda/feedstock_root/build_artifacts/rich_1641736075057/work\r\n```\r\n\r\n\r\n\r\n</details>\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1870/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1859","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1859/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1859/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1859/events","html_url":"https://github.com/Textualize/rich/issues/1859","id":1111169456,"node_id":"I_kwDODSlIsc5COxmw","number":1859,"title":"[REQUEST] Support for PEP 654 tracebacks (ExceptionGroups)","user":{"login":"Tinche","id":1909233,"node_id":"MDQ6VXNlcjE5MDkyMzM=","avatar_url":"https://avatars.githubusercontent.com/u/1909233?v=4","gravatar_id":"","url":"https://api.github.com/users/Tinche","html_url":"https://github.com/Tinche","followers_url":"https://api.github.com/users/Tinche/followers","following_url":"https://api.github.com/users/Tinche/following{/other_user}","gists_url":"https://api.github.com/users/Tinche/gists{/gist_id}","starred_url":"https://api.github.com/users/Tinche/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tinche/subscriptions","organizations_url":"https://api.github.com/users/Tinche/orgs","repos_url":"https://api.github.com/users/Tinche/repos","events_url":"https://api.github.com/users/Tinche/events{/privacy}","received_events_url":"https://api.github.com/users/Tinche/received_events","type":"User","site_admin":false},"labels":[{"id":1668492275,"node_id":"MDU6TGFiZWwxNjY4NDkyMjc1","url":"https://api.github.com/repos/Textualize/rich/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1809645463,"node_id":"MDU6TGFiZWwxODA5NjQ1NDYz","url":"https://api.github.com/repos/Textualize/rich/labels/accepted","name":"accepted","color":"c5def5","default":false,"description":"Task was accepted"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-22T01:33:39Z","updated_at":"2022-01-24T11:49:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nlet me provide some context first. [PEP 654](https://www.python.org/dev/peps/pep-0654/) introduces a new type of exception - an ExceptionGroup. (Also a BaseExceptionGroup, which is like the BaseException version of it). An ExceptionGroup is essentially a container for a list of inner exceptions. (It also introduces other things, like the except* clause, but I don't think that's relevant to Rich tracebacks.)\r\n\r\nThe hope is this ExceptionGroup will become a standard way for libraries to raise groups of exceptions. For example, this is a common use case for the Hypothesis library. There will be a backport package on PyPI to provide ExceptionGroups to older Python versions, so third party libraries will be able to use them without issue.\r\n\r\nThere is another PEP, [PEP 678](https://www.python.org/dev/peps/pep-0678/), that builds on ExceptionGroups to reify the concept of an exception note. This PEP has not yet been accepted, and is currently being discussed. (Due to a fluke, the CPython 3.11a4 release contains an implementation of it.) The idea of this PEP is for libraries to be able to attach a string to any exception under the `__note__` attribute, and for traceback machinery to simply print it out if it is present. The notes can and will be multiline in practice, I think.\r\n\r\nSo ExceptionGroups are an official thing, notes will maybe become a thing.\r\n\r\nI'm working on a couple of libraries that can benefit from ExceptionGroups so I can give an example. Imagine you're structuring a JSON payload into a class, and there are errors. Setup code:\r\n\r\n```python\r\nfrom attrs import define\r\nfrom cattrs import structure\r\n\r\n@define\r\nclass Test:\r\n    a: int\r\n    b: int\r\n    c: float\r\n\r\n\r\n@define\r\nclass Outer:\r\n    inner: Test\r\n    c: int\r\n\r\nstructure({\"inner\": {\"a\": 'not_an_int', \"b\": 1}}, Outer)\r\n```\r\nAn ExceptionGroup flies out, and the default traceback module in 3.11 renders it like this:\r\n```python\r\n  + Exception Group Traceback (most recent call last):\r\n  |   File \"/Users/tintvrtkovic/pg/cattrs/a01.py\", line 33, in <module>\r\n  |     structure({\"inner\": {\"a\": 'not_an_int', \"b\": 1}}, Outer)\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |   File \"/Users/tintvrtkovic/pg/cattrs/src/cattr/converters.py\", line 308, in structure\r\n  |     return self._structure_func.dispatch(cl)(obj, cl)\r\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |   File \"<cattrs generated structure __main__.Outer>\", line 14, in structure_Outer\r\n  | ExceptionGroup\r\n  +-+---------------- 1 ----------------\r\n    | Exception Group Traceback (most recent call last):\r\n    |   File \"<cattrs generated structure __main__.Outer>\", line 5, in structure_Outer\r\n    |   File \"<cattrs generated structure __main__.Test>\", line 19, in structure_Test\r\n    | ExceptionGroup\r\n    | Structuring class attribute Outer.inner\r\n    +-+---------------- 1 ----------------\r\n      | Traceback (most recent call last):\r\n      |   File \"<cattrs generated structure __main__.Test>\", line 5, in structure_Test\r\n      | ValueError: invalid literal for int() with base 10: 'not_an_int'\r\n      | Structuring class attribute Test.a\r\n      +---------------- 2 ----------------\r\n      | Traceback (most recent call last):\r\n      |   File \"<cattrs generated structure __main__.Test>\", line 15, in structure_Test\r\n      | KeyError: 'c'\r\n      | Structuring class attribute Test.c\r\n      +------------------------------------\r\n    +---------------- 2 ----------------\r\n    | Traceback (most recent call last):\r\n    |   File \"<cattrs generated structure __main__.Outer>\", line 10, in structure_Outer\r\n    | KeyError: 'c'\r\n    | Structuring class attribute Outer.c\r\n    +------------------------------------\r\n```\r\n\r\nThe `Structuring class attribute Test.a` strings are notes, added by cattrs.\r\n\r\nIt's a little messy, but there's a lot of information in there. The `Outer` class has errors for attributes `inner` (an ExceptionGroup) and `c` (a KeyError), and diving in, the Inner class (under `inner`) has errors for `a` (ValueError) and `c` (KeyError).\r\n\r\nAnyway, this is how the traceback module prints this. I'm sure a Rich version would be much easier on the eyes ;)","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1859/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1859/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1824","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1824/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1824/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1824/events","html_url":"https://github.com/Textualize/rich/issues/1824","id":1098599849,"node_id":"I_kwDODSlIsc5Be02p","number":1824,"title":"[bug] rich + crlf = notepad python","user":{"login":"philiparvidsson","id":1163299,"node_id":"MDQ6VXNlcjExNjMyOTk=","avatar_url":"https://avatars.githubusercontent.com/u/1163299?v=4","gravatar_id":"","url":"https://api.github.com/users/philiparvidsson","html_url":"https://github.com/philiparvidsson","followers_url":"https://api.github.com/users/philiparvidsson/followers","following_url":"https://api.github.com/users/philiparvidsson/following{/other_user}","gists_url":"https://api.github.com/users/philiparvidsson/gists{/gist_id}","starred_url":"https://api.github.com/users/philiparvidsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philiparvidsson/subscriptions","organizations_url":"https://api.github.com/users/philiparvidsson/orgs","repos_url":"https://api.github.com/users/philiparvidsson/repos","events_url":"https://api.github.com/users/philiparvidsson/events{/privacy}","received_events_url":"https://api.github.com/users/philiparvidsson/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-11T03:07:08Z","updated_at":"2022-01-24T18:37:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## How to h4x?\r\n\r\nAfter approx. 12 hours of debugging why my app is silently crashing, I have finally figured out the cause. Here's a minimal (non-)working example file for you to work on, lol. It only crashes on Windoze, and it does so in a really nasty way which seems to entirely screw up the Python runtime. Line 1088 in one of the rich source files may be related.\r\n\r\n```python\r\nimport os\r\nimport time\r\n\r\nfrom rich.layout import Layout\r\nfrom rich.live import Live\r\nfrom rich.text import Text\r\n\r\ntext = Text()\r\ntext.append(Text(\"foo\" + os.linesep, style=\"yellow\"))\r\nlayout = Layout(renderable=text)\r\n\r\nwith Live(layout):\r\n    while True:\r\n        time.sleep(0.1)\r\n```\r\n## Screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/1163299/148874070-e5ced9d6-6e92-4390-999f-b78dc4d4931b.png)\r\n\r\n## Platform\r\n\r\nWindows 10 Command Prompt in a VM, but also tested on live Windows 10 system. Does not crash on Linux.\r\n\r\n```\r\n┌─────────────────────── <class 'rich.console.Console'> ───────────────────────┐\r\n│ A high level console interface.                                              │\r\n│                                                                              │\r\n│ ┌──────────────────────────────────────────────────────────────────────────┐ │\r\n│ │ <console width=189 ColorSystem.WINDOWS>                                  │ │\r\n│ └──────────────────────────────────────────────────────────────────────────┘ │\r\n│                                                                              │\r\n│     color_system = 'windows'                                                 │\r\n│         encoding = 'utf-8'                                                   │\r\n│             file = <colorama.ansitowin32.StreamWrapper object at 0x01809C10> │\r\n│           height = 42                                                        │\r\n│    is_alt_screen = False                                                     │\r\n│ is_dumb_terminal = False                                                     │\r\n│   is_interactive = True                                                      │\r\n│       is_jupyter = False                                                     │\r\n│      is_terminal = True                                                      │\r\n│   legacy_windows = True                                                      │\r\n│         no_color = False                                                     │\r\n│          options = ConsoleOptions(                                           │\r\n│                        size=ConsoleDimensions(width=189, height=42),         │\r\n│                        legacy_windows=True,                                  │\r\n│                        min_width=1,                                          │\r\n│                        max_width=189,                                        │\r\n│                        is_terminal=True,                                     │\r\n│                        encoding='utf-8',                                     │\r\n│                        max_height=42,                                        │\r\n│                        justify=None,                                         │\r\n│                        overflow=None,                                        │\r\n│                        no_wrap=False,                                        │\r\n│                        highlight=None,                                       │\r\n│                        markup=None,                                          │\r\n│                        height=None                                           │\r\n│                    )                                                         │\r\n│            quiet = False                                                     │\r\n│           record = False                                                     │\r\n│         safe_box = True                                                      │\r\n│             size = ConsoleDimensions(width=189, height=42)                   │\r\n│        soft_wrap = False                                                     │\r\n│           stderr = False                                                     │\r\n│            style = None                                                      │\r\n│         tab_size = 8                                                         │\r\n│            width = 189                                                       │\r\n└──────────────────────────────────────────────────────────────────────────────┘\r\nplatform=\"Windows\"\r\nWindowsConsoleFeatures(vt=False, truecolor=False)\r\nrich==11.0.0\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1824/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1810","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1810/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1810/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1810/events","html_url":"https://github.com/Textualize/rich/issues/1810","id":1095442726,"node_id":"I_kwDODSlIsc5BSyEm","number":1810,"title":"[REQUEST] Ability to suppress the length of local variables or completely filter them in Rich tracebacks.","user":{"login":"pbsds","id":140964,"node_id":"MDQ6VXNlcjE0MDk2NA==","avatar_url":"https://avatars.githubusercontent.com/u/140964?v=4","gravatar_id":"","url":"https://api.github.com/users/pbsds","html_url":"https://github.com/pbsds","followers_url":"https://api.github.com/users/pbsds/followers","following_url":"https://api.github.com/users/pbsds/following{/other_user}","gists_url":"https://api.github.com/users/pbsds/gists{/gist_id}","starred_url":"https://api.github.com/users/pbsds/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pbsds/subscriptions","organizations_url":"https://api.github.com/users/pbsds/orgs","repos_url":"https://api.github.com/users/pbsds/repos","events_url":"https://api.github.com/users/pbsds/events{/privacy}","received_events_url":"https://api.github.com/users/pbsds/received_events","type":"User","site_admin":false},"labels":[{"id":1809645463,"node_id":"MDU6TGFiZWwxODA5NjQ1NDYz","url":"https://api.github.com/repos/Textualize/rich/labels/accepted","name":"accepted","color":"c5def5","default":false,"description":"Task was accepted"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-06T15:45:42Z","updated_at":"2022-01-20T11:42:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Have you checked the issues for a similar suggestions?**\r\n#318 and #1378 is related\r\n\r\n**How would you improve Rich?**\r\n\r\nShowing the local variables in Rich tracebacks is incredibly helpful, but this does at times become too verbose prompting me to disable it. Especially when dealing with types such as `torch.nn.Module`, which feature _very_ long `__repr__` and `__str__` outputs (example of a single frame featured below). My feature request is twofold: the ability to _filter_ certain local variables entierly, and the ability to _suppress_/_truncate_ the length of others.\r\n\r\nVariable names that start with a double underscore prefix (e.g. `__init__`) is a prime target for filtering.\r\nI imagine parametrizing such behavior in `rich.traceback.install` with an optional lambda function (e.g. `locals_filterer=lambda x: not x.startswith(\"__\")`).\r\n\r\nFor suppressing/truncating the length, one could either fallback to the default `object.__repr__` format, or simply clip all `__repr__`() output to `n` lines with trailing ellipsis (as dictionaries already seem to do).\r\nFor deciding which locals to suppress, if not all, one could either provide a list of qualified class names (`type(obj).__qualname__`) and types (kinda like the existing `suppress` argument for modules), or provide a lambda which determines if it should be supressed (e.g. `locals_suppress=lambda x: any(isinstance(x, i) for i in list_of_types_to_suppress)`)\r\n\r\n<details>\r\n<summary>Example output (note the `module = MyMachineLearningModel`):</summary>\r\n\r\n```\r\n│ /home/pbsds/ntnu/xxxxxxxxxxxxxxxxxxxxxxxxxx/yyyyyy/cli.py:332 in log_training_setup                                          │\r\n│                                                                                                                              │\r\n│   329 │   │   if logger is not None:                                                                                         │\r\n│   330 │   │   │   print(f\"{logger.__class__.__qualname__} hparams:\")                                                         │\r\n│   331 │   │   │   print_dict_twocolumn(config.logging)                                                                       │\r\n│ ❱ 332 │   │   │   logging.log_config(logger, logger = {\"_class\": logger.__class__.__name__} |                                │\r\n│   333 │   │   │                                                                                                              │\r\n│   334 │   │   │   # host info                                                                                                │\r\n│   335 │   │   │   def cmd(cmd: Union[str, list[str]]) -> str:                                                                │\r\n│                                                                                                                              │\r\n│ ╭───────────────────────────────────────────────────────── locals ─────────────────────────────────────────────────────────╮ │\r\n│ │                 args = Namespace(mode='module', data_dir=<class 'inspect._empty'>, samples_per_object=12500,             │ │\r\n│ │                        batch_size=5, dataset_workers=4, checkpoint_callback=None, enable_checkpointing=True,             │ │\r\n│ │                        default_root_dir=None, gradient_clip_val=None, gradient_clip_algorithm=None, process_position=0,  │ │\r\n│ │                        num_nodes=1, num_processes=1, devices=None, gpus=None, auto_select_gpus=False, tpu_cores=None,    │ │\r\n│ │                        ipus=None, log_gpu_memory=True, progress_bar_refresh_rate=None, enable_progress_bar=True,         │ │\r\n│ │                        overfit_batches=0.0, track_grad_norm=-1, check_val_every_n_epoch=1, fast_dev_run=False,           │ │\r\n│ │                        accumulate_grad_batches=None, max_epochs=None, min_epochs=None, max_steps=-1, min_steps=None,     │ │\r\n│ │                        max_time=None, limit_train_batches=1.0, limit_val_batches=1.0, limit_test_batches=1.0,            │ │\r\n│ │                        limit_predict_batches=1.0, val_check_interval=1.0, flush_logs_every_n_steps=None,                 │ │\r\n│ │                        log_every_n_steps=50, accelerator=None, strategy=None, sync_batchnorm=False, precision=32,        │ │\r\n│ │                        enable_model_summary=True, weights_summary='top', weights_save_path=None, num_sanity_val_steps=2, │ │\r\n│ │                        resume_from_checkpoint=None, profiler=None, benchmark=False, deterministic=False,                 │ │\r\n│ │                        reload_dataloaders_every_n_epochs=0, reload_dataloaders_every_epoch=False, auto_lr_find=False,    │ │\r\n│ │                        replace_sampler_ddp=True, detect_anomaly=False, auto_scale_batch_size=False,                      │ │\r\n│ │                        prepare_data_per_node=None, plugins=None, amp_backend='native', amp_level=None,                   │ │\r\n│ │                        move_metrics_to_cpu=False, multiple_trainloader_mode='max_size_cycle',                            │ │\r\n│ │                        stochastic_weight_avg=False, terminate_on_nan=None, template=PosixPath('-'),                      │ │\r\n│ │                        jinja2_variables=[['select', '0'], ['hypernetwork_type', 'hypernetwork']], dot=False, onnx=None,  │ │\r\n│ │                        yaml=False, repr=False, summary=False)                                                            │ │\r\n│ │               config = Munch({'trainer': {}, 'datamodule': {}, 'logging': {'save_dir': 'logdir', 'type': 'tensorboard',  │ │\r\n│ │                        'project': 'yyyyyy'}, 'experiment_name': 'experiment_0-20220106-1537-jmdb',                       │ │\r\n│ │                        'MyMachineLearningModel': {'mode': 'medial_sphere', 'extended_plucker': False, 'latent_features': │ │\r\n│ │                        256, 'hidden_features': 256, 'hidden_layers': 4, 'compute_gradients': False, 'n_atoms': 1,        │ │\r\n│ │                        'normalization': None, 'nonlinearity': 'relu', 'use_film': False, 'dropout_prob': 0.0, 'omega_0': │ │\r\n│ │                        30, 'geom_init': None, 'HyperNetwork': {'hidden_layers': 4, 'hidden_features': 256,               │ │\r\n│ │                        'nonlinearity': 'relu', 'normalization': 'layernorm'}}})                                          │ │\r\n│ │           datamodule = <__main__.TODODataModule object at 0x7ff85256b430>                                                │ │\r\n│ │               logger = <pytorch_lightning.loggers.tensorboard.TensorBoardLogger object at 0x7ff852674430>                │ │\r\n│ │               module = MyMachineLearningModel(                                                                           │ │\r\n│ │                          (net): MedialAtomNet(                                                                           │ │\r\n│ │                        │   (net): FCBlock(                                                                               │ │\r\n│ │                        │     (net): MetaSequential(                                                                      │ │\r\n│ │                        │   │   (0): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=6, out_features=256, bias=True)                      │ │\r\n│ │                        │   │   │   (1): ReLU(inplace=True)                                                               │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (1): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                    │ │\r\n│ │                        │   │   │   (1): ReLU(inplace=True)                                                               │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (2): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                    │ │\r\n│ │                        │   │   │   (1): ReLU(inplace=True)                                                               │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (3): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                    │ │\r\n│ │                        │   │   │   (1): ReLU(inplace=True)                                                               │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (4): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                    │ │\r\n│ │                        │   │   │   (1): ReLU(inplace=True)                                                               │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (5): FCLayer(                                                                             │ │\r\n│ │                        │   │     (parts): MetaSequential(                                                                │ │\r\n│ │                        │   │   │   (0): MetaBatchLinear(in_features=256, out_features=4, bias=True)                      │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │     )                                                                                           │ │\r\n│ │                        │   )                                                                                             │ │\r\n│ │                        │   (hyper_net): HyperNetwork(                                                                    │ │\r\n│ │                        │     (nets): ModuleList(                                                                         │ │\r\n│ │                        │   │   (0): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=1536, bias=True)               │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (1): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (2): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=65536, bias=True)              │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (3): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (4): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=65536, bias=True)              │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (5): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (6): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=65536, bias=True)              │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (7): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (8): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=65536, bias=True)              │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (9): FCBlock(                                                                             │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (10): FCBlock(                                                                            │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=1024, bias=True)               │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   │   (11): FCBlock(                                                                            │ │\r\n│ │                        │   │     (net): MetaSequential(                                                                  │ │\r\n│ │                        │   │   │   (0): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (1): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (2): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (3): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (4): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=256, bias=True)                │ │\r\n│ │                        │   │   │   │   (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)                        │ │\r\n│ │                        │   │   │   │   (2): ReLU(inplace=True)                                                           │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │   │   (5): FCLayer(                                                                         │ │\r\n│ │                        │   │   │     (parts): MetaSequential(                                                            │ │\r\n│ │                        │   │   │   │   (0): MetaBatchLinear(in_features=256, out_features=4, bias=True)                  │ │\r\n│ │                        │   │   │     )                                                                                   │ │\r\n│ │                        │   │   │   )                                                                                     │ │\r\n│ │                        │   │     )                                                                                       │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │     )                                                                                           │ │\r\n│ │                        │   )                                                                                             │ │\r\n│ │                          )                                                                                               │ │\r\n│ │                        )                                                                                                 │ │\r\n│ │       module_hparams = \"HyperNetwork\":      {'hidden_layers': 4, 'hidden_features': 256, 'nonlinearity': 'relu',         │ │\r\n│ │                        'normalization': 'layernorm'}                                                                     │ │\r\n│ │                        \"compute_gradients\": False                                                                        │ │\r\n│ │                        \"dropout_prob\":      0.0                                                                          │ │\r\n│ │                        \"extended_plucker\":  False                                                                        │ │\r\n│ │                        \"geom_init\":         None                                                                         │ │\r\n│ │                        \"hidden_features\":   256                                                                          │ │\r\n│ │                        \"hidden_layers\":     4                                                                            │ │\r\n│ │                        \"latent_features\":   256                                                                          │ │\r\n│ │                        \"mode\":              medial_sphere                                                                │ │\r\n│ │                        \"n_atoms\":           1                                                                            │ │\r\n│ │                        \"nonlinearity\":      relu                                                                         │ │\r\n│ │                        \"normalization\":     None                                                                         │ │\r\n│ │                        \"omega_0\":           30                                                                           │ │\r\n│ │                        \"use_film\":          False                                                                        │ │\r\n│ │             params_d = mappingproxy({                                                                                    │ │\r\n│ │                        │   'self': <Parameter \"self\">,                                                                   │ │\r\n│ │                        │   'data_dir': <Parameter \"data_dir: Union[str, pathlib.Path]\">,                                 │ │\r\n│ │                        │   'samples_per_object': <Parameter \"samples_per_object: int = 12500\">,                          │ │\r\n│ │                        │   'batch_size': <Parameter \"batch_size: int = 5\">,                                              │ │\r\n│ │                        │   'dataset_workers': <Parameter \"dataset_workers: int = 4\">                                     │ │\r\n│ │                        })                                                                                                │ │\r\n│ │       params_trainer = mappingproxy({                                                                                    │ │\r\n│ │                        │   'self': <Parameter \"self\">,                                                                   │ │\r\n│ │                        │   'logger': <Parameter \"logger: Union[pytorch_lightning.loggers.base.LightningLoggerBase,       │ │\r\n│ │                        Iterable[pytorch_lightning.loggers.base.LightningLoggerBase], bool] = True\">,                     │ │\r\n│ │                        │   'checkpoint_callback': <Parameter \"checkpoint_callback: Optional[bool] = None\">,              │ │\r\n│ │                        │   'enable_checkpointing': <Parameter \"enable_checkpointing: bool = True\">,                      │ │\r\n│ │                        │   'callbacks': <Parameter \"callbacks: Union[List[pytorch_lightning.callbacks.base.Callback],    │ │\r\n│ │                        pytorch_lightning.callbacks.base.Callback, NoneType] = None\">,                                    │ │\r\n│ │                        │   'default_root_dir': <Parameter \"default_root_dir: Optional[str] = None\">,                     │ │\r\n│ │                        │   'gradient_clip_val': <Parameter \"gradient_clip_val: Union[int, float, NoneType] = None\">,     │ │\r\n│ │                        │   'gradient_clip_algorithm': <Parameter \"gradient_clip_algorithm: Optional[str] = None\">,       │ │\r\n│ │                        │   'process_position': <Parameter \"process_position: int = 0\">,                                  │ │\r\n│ │                        │   'num_nodes': <Parameter \"num_nodes: int = 1\">,                                                │ │\r\n│ │                        │   ... +52                                                                                       │ │\r\n│ │                        })                                                                                                │ │\r\n│ │ print_dict_twocolumn = <function CliInterface.log_training_setup.<locals>.print_dict_twocolumn at 0x7ff8525819d0>        │ │\r\n│ │                 self = CliInterface(                                                                                     │ │\r\n│ │                        │   module_cls=<class 'yyyyyy.models.xxxxxxxxxxxxxxxxxxx.MyMachineLearningModel'>,                │ │\r\n│ │                        │   datamodule_cls=<class '__main__.TODODataModule'>,                                             │ │\r\n│ │                        │   subparser_dest='mode',                                                                        │ │\r\n│ │                        │   _included_in_config={                                                                         │ │\r\n│ │                        │   │   'trainer': (                                                                              │ │\r\n│ │                        │   │   │   <class 'pytorch_lightning.trainer.trainer.Trainer'>,                                  │ │\r\n│ │                        │   │   │   {                                                                                     │ │\r\n│ │                        │   │   │   │   'commented': True,                                                                │ │\r\n│ │                        │   │   │   │   'exclude_list': {'logger'},                                                       │ │\r\n│ │                        │   │   │   │   'defaults': {'log_gpu_memory': True}                                              │ │\r\n│ │                        │   │   │   }                                                                                     │ │\r\n│ │                        │   │   ),                                                                                        │ │\r\n│ │                        │   │   'datamodule': (<class '__main__.TODODataModule'>, {'commented': True}),                   │ │\r\n│ │                        │   │   'logging': (                                                                              │ │\r\n│ │                        │   │   │   <module 'yyyyyy.logging' from                                                         │ │\r\n│ │                        '/home/pbsds/ntnu/xxxxxxxxxxxxxxxxxxxxxxxxxx/yyyyyy/logging.py'>,                                 │ │\r\n│ │                        │   │   │   {'commented': False, 'save_dir': 'logdir'}                                            │ │\r\n│ │                        │   │   )                                                                                         │ │\r\n│ │                        │   }                                                                                             │ │\r\n│ │                        )                                                                                                 │ │\r\n│ │      trainer_hparams = {                                                                                                 │ │\r\n│ │                        │   'checkpoint_callback': None,                                                                  │ │\r\n│ │                        │   'enable_checkpointing': True,                                                                 │ │\r\n│ │                        │   'default_root_dir': None,                                                                     │ │\r\n│ │                        │   'gradient_clip_val': None,                                                                    │ │\r\n│ │                        │   'gradient_clip_algorithm': None,                                                              │ │\r\n│ │                        │   'process_position': 0,                                                                        │ │\r\n│ │                        │   'num_nodes': 1,                                                                               │ │\r\n│ │                        │   'num_processes': 1,                                                                           │ │\r\n│ │                        │   'devices': None,                                                                              │ │\r\n│ │                        │   'gpus': None,                                                                                 │ │\r\n│ │                        │   ... +49                                                                                       │ │\r\n│ │                        }                                                                                                 │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\r\n```\r\n</details>\r\n\r\n**What problem does it solve for you?**\r\n\r\nWhen running my program on a supercluster, which often feature a queue time of several hours,  it sucks for it to immediately crash without me having set `show_locals=True` in `rich.traceback.install` simply due to it being too verbose.\r\nHaving it be enabled all the time, without it being too noisy, would _greatly_ reduce development friction and put a smile on my face.","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1810/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1810/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Textualize/rich/issues/1797","repository_url":"https://api.github.com/repos/Textualize/rich","labels_url":"https://api.github.com/repos/Textualize/rich/issues/1797/labels{/name}","comments_url":"https://api.github.com/repos/Textualize/rich/issues/1797/comments","events_url":"https://api.github.com/repos/Textualize/rich/issues/1797/events","html_url":"https://github.com/Textualize/rich/issues/1797","id":1092564310,"node_id":"I_kwDODSlIsc5BHzVW","number":1797,"title":"[REQUEST] Allow console.status(transient=False) to keep it in the console","user":{"login":"zerothi","id":4789793,"node_id":"MDQ6VXNlcjQ3ODk3OTM=","avatar_url":"https://avatars.githubusercontent.com/u/4789793?v=4","gravatar_id":"","url":"https://api.github.com/users/zerothi","html_url":"https://github.com/zerothi","followers_url":"https://api.github.com/users/zerothi/followers","following_url":"https://api.github.com/users/zerothi/following{/other_user}","gists_url":"https://api.github.com/users/zerothi/gists{/gist_id}","starred_url":"https://api.github.com/users/zerothi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zerothi/subscriptions","organizations_url":"https://api.github.com/users/zerothi/orgs","repos_url":"https://api.github.com/users/zerothi/repos","events_url":"https://api.github.com/users/zerothi/events{/privacy}","received_events_url":"https://api.github.com/users/zerothi/received_events","type":"User","site_admin":false},"labels":[{"id":2200581776,"node_id":"MDU6TGFiZWwyMjAwNTgxNzc2","url":"https://api.github.com/repos/Textualize/rich/labels/Needs%20triage","name":"Needs triage","color":"bfdadc","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-03T14:36:34Z","updated_at":"2022-01-06T14:24:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**How would you improve Rich?**\r\n\r\nIt would be great if one could allow the `Status` spinners to remain in the console when printing. Currently the `transient=True` is hard-coded in the `Status.__init__` method. Instead one could pass down the `transient` argument to the `Live` class instantiation. This would allow the status report to remain. \r\n\r\n**What problem does it solve for you?**\r\n\r\nIt allows me to have the entire thing in the prompt. Something that would make it easier for end-users since *every* step is maintained in the output.\r\n\r\nI would be happy to make a PR if you agree this would be nice, something like this would work:\r\n\r\n```python\r\nclass Status(JupyterMixin):\r\n    \"\"\"Displays a status indicator with a 'spinner' animation.\r\n\r\n    Args:\r\n        status (RenderableType): A status renderable (str or Text typically).\r\n        console (Console, optional): Console instance to use, or None for global console. Defaults to None.\r\n        spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\r\n        spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\r\n        speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\r\n        refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\r\n    \"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        status: RenderableType,\r\n        *,\r\n        console: Optional[Console] = None,\r\n        spinner: str = \"dots\",\r\n        spinner_style: StyleType = \"status.spinner\",\r\n        speed: float = 1.0,\r\n        refresh_per_second: float = 12.5,\r\n        transient: bool = True\r\n    ):\r\n        self.status = status\r\n        self.spinner_style = spinner_style\r\n        self.speed = speed\r\n        self._spinner = Spinner(spinner, text=status, style=spinner_style, speed=speed)\r\n        self._live = Live(\r\n            self.renderable,\r\n            console=console,\r\n            refresh_per_second=refresh_per_second,\r\n            transient=transient,\r\n        )\r\n    ....\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Textualize/rich/issues/1797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Textualize/rich/issues/1797/timeline","performed_via_github_app":null}]