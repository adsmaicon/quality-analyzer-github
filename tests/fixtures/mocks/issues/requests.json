[{"url":"https://api.github.com/repos/psf/requests/issues/6095","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6095/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6095/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6095/events","html_url":"https://github.com/psf/requests/pull/6095","id":1178614087,"node_id":"PR_kwDOABTKOs406G2S","number":6095,"title":"[Draft] Add automatic code formatting to Requests","user":{"login":"nateprewitt","id":5271761,"node_id":"MDQ6VXNlcjUyNzE3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/5271761?v=4","gravatar_id":"","url":"https://api.github.com/users/nateprewitt","html_url":"https://github.com/nateprewitt","followers_url":"https://api.github.com/users/nateprewitt/followers","following_url":"https://api.github.com/users/nateprewitt/following{/other_user}","gists_url":"https://api.github.com/users/nateprewitt/gists{/gist_id}","starred_url":"https://api.github.com/users/nateprewitt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nateprewitt/subscriptions","organizations_url":"https://api.github.com/users/nateprewitt/orgs","repos_url":"https://api.github.com/users/nateprewitt/repos","events_url":"https://api.github.com/users/nateprewitt/events{/privacy}","received_events_url":"https://api.github.com/users/nateprewitt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-23T20:15:49Z","updated_at":"2022-03-28T18:50:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/6095","html_url":"https://github.com/psf/requests/pull/6095","diff_url":"https://github.com/psf/requests/pull/6095.diff","patch_url":"https://github.com/psf/requests/pull/6095.patch","merged_at":null},"body":"### Overview\r\nThis is a draft PR for adding standardized code formatting to Requests. Now that we intend to drop Python 2 support, we have the opportunity to clean up multiple conflicting code styles that have crept into Requests over the years.\r\n\r\nThis PR will introduce a few standard changes:\r\n\r\n* Integration of `black` for code formatting, bringing Requests in-line with what has largely become the standard.\r\n* Integration of `isort` to ensure our imports are automatically grouped and cleaned.\r\n* Integration of `pyupgrade` which will automatically pull most of the code base to Python 3.7 syntax.\r\n* Addition of a `.pre-commit-config.yaml` to orchestrate the above tools.\r\n\r\n### TODO\r\n- [x] Rebase on to #6091 before merge\r\n- [ ] Resolve formatting issues with server response line wrapping in `tests/test_lowlevel.py`\r\n- [ ] Add .git-blame-ignore-revs file\r\n- [x] Fix inconsistent f-string upgrades\r\n- [ ] Enable and fix flake8 issues","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6095/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6094","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6094/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6094/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6094/events","html_url":"https://github.com/psf/requests/issues/6094","id":1178140499,"node_id":"I_kwDOABTKOs5GOP9T","number":6094,"title":"HTTPBasicAuth does not handle non-latin-1 characters","user":{"login":"frafra","id":4068,"node_id":"MDQ6VXNlcjQwNjg=","avatar_url":"https://avatars.githubusercontent.com/u/4068?v=4","gravatar_id":"","url":"https://api.github.com/users/frafra","html_url":"https://github.com/frafra","followers_url":"https://api.github.com/users/frafra/followers","following_url":"https://api.github.com/users/frafra/following{/other_user}","gists_url":"https://api.github.com/users/frafra/gists{/gist_id}","starred_url":"https://api.github.com/users/frafra/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frafra/subscriptions","organizations_url":"https://api.github.com/users/frafra/orgs","repos_url":"https://api.github.com/users/frafra/repos","events_url":"https://api.github.com/users/frafra/events{/privacy}","received_events_url":"https://api.github.com/users/frafra/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-03-23T13:40:56Z","updated_at":"2022-03-23T14:42:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nI have a password containing Norwegian characters, like \"Ã¸\". I found that `HTTPBasicAuth` generates a wrong `Authentication` header, as the base64-encoded password differed from what I computed and successfully tested.\r\n\r\nIt looks like `latin-1` is the default encoding instead of  `utf-8`:\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L59-L63\r\n\r\nMy workaround is to encode strings to `utf-8` before passing them to `HTTPBasicAuth`, but it looks like this would break starting with `requests >= 3.0.0`:\r\n\r\nhttps://github.com/psf/requests/blob/79f60274f7e461b8fd2f579e741f748438d7eadb/requests/auth.py#L36-L41\r\n\r\nI do not know if different servers have different defaults, but if `requests` do not want to handle binary sequences, then it should probably allow specifying different encodings.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6094/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6086","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6086/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6086/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6086/events","html_url":"https://github.com/psf/requests/issues/6086","id":1170383353,"node_id":"I_kwDOABTKOs5FwqH5","number":6086,"title":"urllib.request.proxy_bypass makes DNS request without using configured proxies when system has NO_PROXY configured at some level","user":{"login":"GiorgioComitini","id":76849071,"node_id":"MDQ6VXNlcjc2ODQ5MDcx","avatar_url":"https://avatars.githubusercontent.com/u/76849071?v=4","gravatar_id":"","url":"https://api.github.com/users/GiorgioComitini","html_url":"https://github.com/GiorgioComitini","followers_url":"https://api.github.com/users/GiorgioComitini/followers","following_url":"https://api.github.com/users/GiorgioComitini/following{/other_user}","gists_url":"https://api.github.com/users/GiorgioComitini/gists{/gist_id}","starred_url":"https://api.github.com/users/GiorgioComitini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GiorgioComitini/subscriptions","organizations_url":"https://api.github.com/users/GiorgioComitini/orgs","repos_url":"https://api.github.com/users/GiorgioComitini/repos","events_url":"https://api.github.com/users/GiorgioComitini/events{/privacy}","received_events_url":"https://api.github.com/users/GiorgioComitini/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2022-03-16T00:04:14Z","updated_at":"2022-03-28T16:47:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using Requests via a SOCKS5 proxy on one of the latest MacBook Pros (Apple Silicon), the DNS requests are not correctly passed to the proxy server even when using the \"socks5h\" scheme. Instead, the DNS resolution happens at the level of the client, causing a DNS leak.\r\n\r\nThis happens with various versions/combinations of Requests/PySocks/Python, the latter being the Apple Silicon versions obtained through pyenv. I have tested this using the local SOCKS5 proxy server provided by Tor.\r\n\r\nIn more detail, I tested the bug on various pyenv Python distributions, labeled 3.8 to 3.10 plus miniforge3, with Requests from v2.16.0 to v2.27.1, and PySocks from v1.5.7 to v1.7.1 (not every single version in between). In what follows, I'll use an example System Information output.\r\n\r\nAlso, I used Wireshark to monitor the DNS requests, and I used curl with the --proxy socks5h://127.0.0.1:9050 flag as a control, to make sure that the local Tor proxy was working properly and that the DNS leak is indeed specific to Python/Requests/PySocks.\r\n\r\nI am not able to confirm whether the DNS leak also happens on Python versions obtained other than through pyenv. On an Intel MacBook using an Anaconda Python version and the latest Requests/PySocks, the leak does not occur.\r\n\r\n## Expected Result\r\n\r\nWhen using the \"socks5h\" scheme, the DNS requests should be forwarded to the SOCKS proxy.\r\n\r\n## Actual Result\r\n\r\nThe DNS requests are sent from the client instead, causing a DNS leak.\r\n\r\n## Reproduction Steps\r\n\r\nInstall any Apple Silicon Python version from pyenv (see above for the versions I tested) and start Tor.\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n    \"http\": \"socks5h://127.0.0.1:9050\",\r\n    \"https\": \"socks5h://127.0.0.1:9050\",\r\n}\r\n\r\nresp = requests.get(\"https://\"+url, proxies=proxies)\r\n```\r\n\r\nMonitor the outgoing DNS requests using Wireshark. If they are sent via the outbound network interface to your pre-configured DNS server (as opposed to the local interface, destination IP 127.0.0.1, port 9050), a DNS leak is occurring.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"21.4.0\",\r\n    \"system\": \"Darwin\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010df\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.8\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n\r\n<!-- This command is only available on Requests v2.16.4 and greater. Otherwise,\r\nplease provide some basic information about your system (Python version,\r\noperating system, &c). -->\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6086/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6083","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6083/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6083/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6083/events","html_url":"https://github.com/psf/requests/issues/6083","id":1166442716,"node_id":"I_kwDOABTKOs5FhoDc","number":6083,"title":"ValueError is raised instead of InvalidHeader","user":{"login":"arossert","id":7085494,"node_id":"MDQ6VXNlcjcwODU0OTQ=","avatar_url":"https://avatars.githubusercontent.com/u/7085494?v=4","gravatar_id":"","url":"https://api.github.com/users/arossert","html_url":"https://github.com/arossert","followers_url":"https://api.github.com/users/arossert/followers","following_url":"https://api.github.com/users/arossert/following{/other_user}","gists_url":"https://api.github.com/users/arossert/gists{/gist_id}","starred_url":"https://api.github.com/users/arossert/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arossert/subscriptions","organizations_url":"https://api.github.com/users/arossert/orgs","repos_url":"https://api.github.com/users/arossert/repos","events_url":"https://api.github.com/users/arossert/events{/privacy}","received_events_url":"https://api.github.com/users/arossert/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-11T13:53:53Z","updated_at":"2022-03-11T13:54:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using an invalid header name it is not checked in the `requests.utils.check_header_validity` function, only the value is checked.\r\n\r\nThis causes the underline HTTPConnection to fail when trying to write the header on `ValueError`, seems like that it is checked against:\r\n`_is_legal_header_name = re.compile(rb'[^:\\s][^:\\r\\n]*').fullmatch`\r\n\r\nThe expected exception, in this case, will be `InvalidHeader`\r\n\r\n```python\r\nimport requests\r\nrequests.get(\"https://www.google.com\", headers={\":bad\": \"header\"})\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.12\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-1068-aws\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.27.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.8\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6083/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6070","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6070/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6070/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6070/events","html_url":"https://github.com/psf/requests/issues/6070","id":1144124020,"node_id":"I_kwDOABTKOs5EMfJ0","number":6070,"title":"Migrate test suite to support Flask>2.0","user":{"login":"nateprewitt","id":5271761,"node_id":"MDQ6VXNlcjUyNzE3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/5271761?v=4","gravatar_id":"","url":"https://api.github.com/users/nateprewitt","html_url":"https://github.com/nateprewitt","followers_url":"https://api.github.com/users/nateprewitt/followers","following_url":"https://api.github.com/users/nateprewitt/following{/other_user}","gists_url":"https://api.github.com/users/nateprewitt/gists{/gist_id}","starred_url":"https://api.github.com/users/nateprewitt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nateprewitt/subscriptions","organizations_url":"https://api.github.com/users/nateprewitt/orgs","repos_url":"https://api.github.com/users/nateprewitt/repos","events_url":"https://api.github.com/users/nateprewitt/events{/privacy}","received_events_url":"https://api.github.com/users/nateprewitt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-19T01:42:34Z","updated_at":"2022-02-19T01:42:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As shown in #5846 and #6069, our test suite is now thoroughly broken from Flask 2.0 onwards. We never did a deep dive to understand what caused the breakage and now changes in the underlying modules (markupsafe, werkzeug) are causing further problems. We need to sit down and work out the issue, unblocking upgrading Flask if possible.\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6070/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6070/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6048","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6048/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6048/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6048/events","html_url":"https://github.com/psf/requests/pull/6048","id":1113918664,"node_id":"PR_kwDOABTKOs4xj3Jb","number":6048,"title":"Fixing unicode surrogates in POST data lead to exception","user":{"login":"mftb","id":1322800,"node_id":"MDQ6VXNlcjEzMjI4MDA=","avatar_url":"https://avatars.githubusercontent.com/u/1322800?v=4","gravatar_id":"","url":"https://api.github.com/users/mftb","html_url":"https://github.com/mftb","followers_url":"https://api.github.com/users/mftb/followers","following_url":"https://api.github.com/users/mftb/following{/other_user}","gists_url":"https://api.github.com/users/mftb/gists{/gist_id}","starred_url":"https://api.github.com/users/mftb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mftb/subscriptions","organizations_url":"https://api.github.com/users/mftb/orgs","repos_url":"https://api.github.com/users/mftb/repos","events_url":"https://api.github.com/users/mftb/events{/privacy}","received_events_url":"https://api.github.com/users/mftb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-25T13:55:14Z","updated_at":"2022-03-09T18:26:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/6048","html_url":"https://github.com/psf/requests/pull/6048","diff_url":"https://github.com/psf/requests/pull/6048.diff","patch_url":"https://github.com/psf/requests/pull/6048.patch","merged_at":null},"body":"Closes #6008\r\nFixing the unicode surrogates issue","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6048/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6026","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6026/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6026/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6026/events","html_url":"https://github.com/psf/requests/issues/6026","id":1091897772,"node_id":"I_kwDOABTKOs5BFQms","number":6026,"title":"UnicodeDecodeError after following a chain of redirects ","user":{"login":"wodim","id":1001553,"node_id":"MDQ6VXNlcjEwMDE1NTM=","avatar_url":"https://avatars.githubusercontent.com/u/1001553?v=4","gravatar_id":"","url":"https://api.github.com/users/wodim","html_url":"https://github.com/wodim","followers_url":"https://api.github.com/users/wodim/followers","following_url":"https://api.github.com/users/wodim/following{/other_user}","gists_url":"https://api.github.com/users/wodim/gists{/gist_id}","starred_url":"https://api.github.com/users/wodim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wodim/subscriptions","organizations_url":"https://api.github.com/users/wodim/orgs","repos_url":"https://api.github.com/users/wodim/repos","events_url":"https://api.github.com/users/wodim/events{/privacy}","received_events_url":"https://api.github.com/users/wodim/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-01T21:42:39Z","updated_at":"2022-01-02T16:41:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"#6006\r\n\r\nSomething confuses requests (or urllib3?) along the way\r\n\r\nActual Result\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nReproduction Steps\r\nimport requests\r\nrequests.get(\"https://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa%C3%B1oles-champions/00031639396272418389372.htm\")\r\n\r\nSystem Information\r\n$ python -m requests.help\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"36.0.0\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.10\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.4.0-17763-Microsoft\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"101010cf\",\r\n    \"version\": \"21.0.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n@sigmavirus24 you have been too harsh on this one.\r\n\r\nTraceback (most recent call last):\r\nFile \"\", line 1, in\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 76, in get\r\nreturn request('get', url, params=params, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\api.py\", line 61, in request\r\nreturn session.request(method=method, url=url, **kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 542, in request\r\nresp = self.send(prep, **send_kwargs)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in send\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 677, in\r\nhistory = [resp for resp in gen]\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 150, in resolve_redirects\r\nurl = self.get_redirect_target(resp)\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\sessions.py\", line 116, in get_redirect_target\r\nreturn to_native_string(location, 'utf8')\r\nFile \"C:\\Users\\Ahmed\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests_internal_utils.py\", line 25, in to_native_string\r\nout = string.decode(encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 92: invalid continuation byte\r\n\r\nThe guilty part there is return to_native_string(location, 'utf8') Trying to decode the URL to native utf8 when it should rather \"URL encode\" it. I am not an HTTP expert, but this exception should be handled more gracefully anyway.\r\n\r\nThe location given by the remote for redirection is as follow:\r\n\r\nb'http://www.lavozdegalicia.es/noticia/deportes/2021/12/13/psg-juve-united-nuevos-rivales-espa\\xf1oles-champions/00031639396272418389372.htm'\r\n\r\nShould the \\xf1 be decoded as follow %F1 ?\r\n\r\nI can see that this behavior is already followed by Chrome.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6026/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6026/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6025","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6025/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6025/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6025/events","html_url":"https://github.com/psf/requests/issues/6025","id":1091484277,"node_id":"I_kwDOABTKOs5BDrp1","number":6025,"title":"Support for proxy that requires DigestAuth","user":{"login":"raffaem","id":54762742,"node_id":"MDQ6VXNlcjU0NzYyNzQy","avatar_url":"https://avatars.githubusercontent.com/u/54762742?v=4","gravatar_id":"","url":"https://api.github.com/users/raffaem","html_url":"https://github.com/raffaem","followers_url":"https://api.github.com/users/raffaem/followers","following_url":"https://api.github.com/users/raffaem/following{/other_user}","gists_url":"https://api.github.com/users/raffaem/gists{/gist_id}","starred_url":"https://api.github.com/users/raffaem/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raffaem/subscriptions","organizations_url":"https://api.github.com/users/raffaem/orgs","repos_url":"https://api.github.com/users/raffaem/repos","events_url":"https://api.github.com/users/raffaem/events{/privacy}","received_events_url":"https://api.github.com/users/raffaem/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-12-31T09:01:04Z","updated_at":"2022-01-02T18:51:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Requests seems not to have support for proxies which requires DigestAuth, only BasicAuth.\r\n\r\nIn [this SO post](https://stackoverflow.com/a/60031108/1719931) there is an authorization module that implements support for proxies that require DigestAuth, and also allow to connect to HTTPS websites.\r\n\r\n[requests-toolbet](https://github.com/requests/toolbelt) (I don't know whether it is an official project of requests) has a [HTTPProxyDigestAuth](https://toolbelt.readthedocs.io/en/latest/authentication.html#httpproxydigestauth) class, but doesn't [allow to connect to HTTPS websites](https://github.com/requests/toolbelt/issues/321).","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6025/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6025/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6023","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6023/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6023/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6023/events","html_url":"https://github.com/psf/requests/issues/6023","id":1090752258,"node_id":"I_kwDOABTKOs5BA48C","number":6023,"title":"Requests: Python 2.7 Support and Deprecation","user":{"login":"nateprewitt","id":5271761,"node_id":"MDQ6VXNlcjUyNzE3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/5271761?v=4","gravatar_id":"","url":"https://api.github.com/users/nateprewitt","html_url":"https://github.com/nateprewitt","followers_url":"https://api.github.com/users/nateprewitt/followers","following_url":"https://api.github.com/users/nateprewitt/following{/other_user}","gists_url":"https://api.github.com/users/nateprewitt/gists{/gist_id}","starred_url":"https://api.github.com/users/nateprewitt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nateprewitt/subscriptions","organizations_url":"https://api.github.com/users/nateprewitt/orgs","repos_url":"https://api.github.com/users/nateprewitt/repos","events_url":"https://api.github.com/users/nateprewitt/events{/privacy}","received_events_url":"https://api.github.com/users/nateprewitt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-12-29T21:14:52Z","updated_at":"2022-03-15T14:58:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"# Overview\r\n\r\nAs we enter our third year of Python 2.7 reaching end-of-life, Requests has decided it's time to start deprecating our support. While we have yet to confirm a date, we want to provide early notice that this is coming at some point in 2022. This follows as the majority of our critical downstream consumers have finished their deprecation campaigns. While we understand this may be viewed as an inconvenience for those still using Python 2.7, I'll try to layout the steps we're taking to ensure a smooth transition.\r\n\r\nIn January, we will be releasing Requests 2.27.0. This is intended to be the last minor release with guaranteed support, including all 2.27.x hotfix releases. We've taken steps to ensure this release series includes fixes for some of the longer standing pain points and provide as much long term stability as we're able. Users who intend to continue Python 2.7 use should review the `Mitigation Steps` section of this issue.\r\n\r\nGoing forward, we're still working through what a Python 3-only Requests looks like. We'd like to preface now that it's unlikely to contain many of the more exciting features that may have previously been promised by former maintainers. In future releases, we'll look to add quality-of-life improvements as they make sense while maintaining the primary focus of stability in the library. We'll provide more on that as information is available.\r\n\r\n# Mitigation Steps\r\n\r\nFor Requests users that intend to remain on Python 2.7 through 2022, we recommend taking the following mitigation steps.\r\n\r\n1. For users of `pip` 9.0+, we'll also be releasing an update to the `python_requires` metadata to `>=3.7` in Requests. This will prevent unintended installation on unsupported Python versions.\r\n2. For users who want to codify this requirement across all environments, ensure that you've explicitly pinned Requests in your workspace or project to `requests<2.28`. This will prevent unintended interruptions with future releases.\r\n3. For users of LTS operating systems providing Python 2.7 support through 2023, you'll need to work with their support teams for  bug or security issues for any releases after 2.27.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6023/reactions","total_count":12,"+1":5,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6023/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6015","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6015/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6015/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6015/events","html_url":"https://github.com/psf/requests/issues/6015","id":1089176381,"node_id":"I_kwDOABTKOs5A64M9","number":6015,"title":"Possible issue with proxies and TLS versions when using a session.","user":{"login":"defunes43","id":1909717,"node_id":"MDQ6VXNlcjE5MDk3MTc=","avatar_url":"https://avatars.githubusercontent.com/u/1909717?v=4","gravatar_id":"","url":"https://api.github.com/users/defunes43","html_url":"https://github.com/defunes43","followers_url":"https://api.github.com/users/defunes43/followers","following_url":"https://api.github.com/users/defunes43/following{/other_user}","gists_url":"https://api.github.com/users/defunes43/gists{/gist_id}","starred_url":"https://api.github.com/users/defunes43/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/defunes43/subscriptions","organizations_url":"https://api.github.com/users/defunes43/orgs","repos_url":"https://api.github.com/users/defunes43/repos","events_url":"https://api.github.com/users/defunes43/events{/privacy}","received_events_url":"https://api.github.com/users/defunes43/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-12-27T11:27:52Z","updated_at":"2022-02-07T18:04:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using a session or a request object with the same parameters should yield the same results.\r\n\r\nWhen a proxy is used, and when the target website supports TLS 1.0 and TLS 1.1 (or does not support TLS 1.3, I could not figure it out), a request object works fine, whereas a session throws a SSL Error.\r\n\r\n## Expected Result\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://sidep.gouv.fr/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.get('https://sidep.gouv.fr/')\r\n```\r\n\r\nThe two ways to get the data should yield the same result.\r\n\r\n## Actual Result\r\n\r\nThe request works, but not with the session:\r\n\r\n```\r\nHTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 696, in urlopen\r\n    self._prepare_proxy(conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 964, in _prepare_proxy\r\n    conn.connect()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 364, in connect    \r\n    conn = self._connect_tls_proxy(hostname, conn)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connection.py\", line 501, in _connect_tls_proxy\r\n    socket = ssl_wrap_socket(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 453, in ssl_wrap_socket\r\n    ssl_sock = _ssl_wrap_socket_impl(sock, context, tls_in_tls)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\ssl_.py\", line 495, in _ssl_wrap_socket_impl\r\n    return ssl_context.wrap_socket(sock)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 512, in wrap_socket\r\n    return self.sslsocket_class._create(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1070, in _create\r\n    self.do_handshake()\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\ssl.py\", line 1341, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 439, in send        \r\n    resp = conn.urlopen(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\connectionpool.py\", line 755, in urlopen\r\n    retries = retries.increment(\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\urllib3\\util\\retry.py\", line 574, in increment  \r\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy\\__main__.py\", line 45, in <module>\r\n    cli.main()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 444, in main\r\n    run()\r\n  File \"c:\\Users\\Max\\.vscode\\extensions\\ms-python.python-2021.12.1559732655\\pythonFiles\\lib\\python\\debugpy/..\\debugpy\\server\\cli.py\", line 285, in run_file\r\n    runpy.run_path(target_as_str, run_name=compat.force_str(\"__main__\"))\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 269, in run_path\r\n    return _run_module_code(code, init_globals, run_name,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 96, in _run_module_code\r\n    _run_code(code, mod_globals, init_globals,\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"c:\\Users\\Max\\testssl.py\", line 16, in <module>\r\n    raise e\r\n  File \"c:\\Users\\Max\\testssl.py\", line 13, in <module>\r\n    session.get('https://sidep.gouv.fr/')\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 555, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 542, in request     \r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\sessions.py\", line 655, in send        \r\n    r = adapter.send(request, **kwargs)\r\n  File \"C:\\Users\\Max\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\adapters.py\", line 514, in send        \r\n    raise SSLError(e, request=request)\r\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='sidep.gouv.fr', port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, '[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:997)')))\r\n```\r\n\r\nWhen using a TLS 1.3 enabled (which seem to mean TLS 1.0 and 1.1 disabled) website, both versions work, for example:\r\n\r\n```python\r\nimport requests\r\n\r\nproxies = {\r\n  'http': 'http://127.0.0.1:8888',\r\n  'https': 'http://127.0.0.1:8888',\r\n}\r\n\r\nrequests.get('https://example.com/', proxies=proxies)\r\n\r\nsession = requests.Session()\r\nsession.proxies.update(proxies)\r\nsession.verify = False\r\nsession.get('https://example.com/')\r\n```\r\n\r\nWithout the proxy, it works fine for both websites. I spend a couple hours trying with many websites to figure out the breaking cause, and I believe it is the TLS version.\r\n\r\n## System Information\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.10.1\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"10\",\r\n    \"system\": \"Windows\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6015/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6015/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6008","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6008/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6008/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6008/events","html_url":"https://github.com/psf/requests/issues/6008","id":1082739182,"node_id":"I_kwDOABTKOs5AiUnu","number":6008,"title":"Unicode surrogates in POST data lead to exception","user":{"login":"pcworld","id":1506734,"node_id":"MDQ6VXNlcjE1MDY3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1506734?v=4","gravatar_id":"","url":"https://api.github.com/users/pcworld","html_url":"https://github.com/pcworld","followers_url":"https://api.github.com/users/pcworld/followers","following_url":"https://api.github.com/users/pcworld/following{/other_user}","gists_url":"https://api.github.com/users/pcworld/gists{/gist_id}","starred_url":"https://api.github.com/users/pcworld/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcworld/subscriptions","organizations_url":"https://api.github.com/users/pcworld/orgs","repos_url":"https://api.github.com/users/pcworld/repos","events_url":"https://api.github.com/users/pcworld/events{/privacy}","received_events_url":"https://api.github.com/users/pcworld/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-12-16T23:50:15Z","updated_at":"2021-12-17T02:21:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"<!-- Summary. -->\r\n\r\nIn requests 2.26.0 with Python 3, when passing unicode strings with surrogate characters as POST data (either directly as a `str` or as part of a `dict`), sending the request throws an exception.\r\n\r\n## Expected Result\r\n\r\nThe library should not throw an exception, even when fed with unvalidated user input.\r\n\r\n<!-- What you expected. -->\r\n\r\n## Actual Result / Reproduction Steps\r\n\r\n```\r\n>>> import requests\r\n>>> requests.__version__\r\n'2.26.0'\r\n\r\n>>> requests.post('https://example.invalid', data={'name': 'test\\udced\\udcb3\\udc83.pdf'})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 528, in request\r\n    prep = self.prepare_request(req)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 466, in prepare_request\r\n    hooks=merge_hooks(request.hooks, self.hooks),\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 319, in prepare\r\n    self.prepare_body(data, files, json)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 515, in prepare_body\r\n    body = self._encode_params(data)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/models.py\", line 104, in _encode_params\r\n    v.encode('utf-8') if isinstance(v, str) else v))\r\nUnicodeEncodeError: 'utf-8' codec can't encode characters in position 4-6: surrogates not allowed\r\n\r\n>>> requests.post('https://example.com/', 'test\\udced\\udcb3\\udc83.pdf')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 117, in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 706, in urlopen\r\n    chunked=chunked,\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 394, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/home/user/.local/lib/python3.7/site-packages/urllib3/connection.py\", line 239, in request\r\n    super(HTTPConnection, self).request(method, url, body=body, headers=headers)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1260, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.7/http/client.py\", line 1305, in _send_request\r\n    body = _encode(body, 'body')\r\n  File \"/usr/lib/python3.7/http/client.py\", line 174, in _encode\r\n    (name.title(), data[err.start:err.end], name)) from None\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 4-6: Body ('\\udced\\udcb3\\udc83') is not valid Latin-1. Use body.encode('utf-8') if you want to send it encoded in UTF-8.\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.7.3\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"4.19.0-17-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010104f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n```\r\n-----\r\nIn [requests/models.py](https://github.com/psf/requests/blob/39d0fdd9096f7dceccbc8f82e1eda7dd64717a8e/requests/models.py), there are several calls like `some_string.encode('utf-8')`. I suppose changing them to `some_string.encode('utf-8', 'surrogatepass')` would at least fix the first reproduction case. Not sure about the second, since the exception occurs in http.client there.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6008/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6008/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/6004","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/6004/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/6004/comments","events_url":"https://api.github.com/repos/psf/requests/issues/6004/events","html_url":"https://github.com/psf/requests/issues/6004","id":1077668422,"node_id":"I_kwDOABTKOs5AO-pG","number":6004,"title":"For Morsel cookies requests expects wrong Expires time format","user":{"login":"druid8","id":43011904,"node_id":"MDQ6VXNlcjQzMDExOTA0","avatar_url":"https://avatars.githubusercontent.com/u/43011904?v=4","gravatar_id":"","url":"https://api.github.com/users/druid8","html_url":"https://github.com/druid8","followers_url":"https://api.github.com/users/druid8/followers","following_url":"https://api.github.com/users/druid8/following{/other_user}","gists_url":"https://api.github.com/users/druid8/gists{/gist_id}","starred_url":"https://api.github.com/users/druid8/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/druid8/subscriptions","organizations_url":"https://api.github.com/users/druid8/orgs","repos_url":"https://api.github.com/users/druid8/repos","events_url":"https://api.github.com/users/druid8/events{/privacy}","received_events_url":"https://api.github.com/users/druid8/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-12-11T22:49:51Z","updated_at":"2022-03-14T17:59:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm not sure about this, but it looks that requests is expecting invalid date format in Expires section in Cookies passed as Morsel objects.\r\n\r\n`morsel_to_cookie` (from `requests/cookie.py`) function parse `expires` attr if there is no `max-age` (which is OK) using format from `time_template`. However this format is set as `'%a, %d-%b-%Y %H:%M:%S GMT'` which is none of allowed expires section date value described in RFC (https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1).\r\n\r\nThe nearest format is the first choice from https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1. The difference is that between date parts there should be a space, but requests expects dash.\r\n\r\nSee Reproduction Steps for very simple example which bases on Python std libs only and crashes.\r\n\r\n## Expected Result\r\n\r\nIt's expected that requests properly accepts Morsel cookies when expires follows RFC https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1.\r\n\r\n## Actual Result\r\n\r\nThere is `ValueError` raised by strptime that passed value does not match format.\r\nExample:\r\n`ValueError: time data 'Thu, 01 Jan 1970 00:00:00 GMT' does not match format '%a, %d-%b-%Y %H:%M:%S GMT'`\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\n    from http.cookies import SimpleCookie\r\n    from requests.cookies import RequestsCookieJar\r\n    cookies = SimpleCookie()\r\n    cookies.load('auth_session=null; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; httponly; samesite=strict')\r\n\r\n    jar = RequestsCookieJar()\r\n    jar.update(cookies)\r\n```\r\n\r\nExample above is a simplified case of using [`async_asgi_testclient`](https://github.com/vinissimus/async-asgi-testclient) to test application written with [`Starlette`](https://www.starlette.io/) with `SessionMiddleware`. The `async_asgi_testclient` collects cookies using `SimpleCookie` class from standard `http` lib and then pass them to `requests` lib which is used to perform client test requests.\r\n\r\nBut this issue is not related to these packages as I reproduced it using only Python standard `http` lib and `requests` as above.\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.9\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.3\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.15.0-1-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010cf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.7\"\r\n  },\r\n  \"using_charset_normalizer\": false,\r\n  \"using_pyopenssl\": false\r\n}\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/6004/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/6004/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5975","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5975/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5975/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5975/events","html_url":"https://github.com/psf/requests/issues/5975","id":1052405538,"node_id":"I_kwDOABTKOs4-um8i","number":5975,"title":"How to regenerate Authorization header for each retry?","user":{"login":"vitaly-krugl","id":1441066,"node_id":"MDQ6VXNlcjE0NDEwNjY=","avatar_url":"https://avatars.githubusercontent.com/u/1441066?v=4","gravatar_id":"","url":"https://api.github.com/users/vitaly-krugl","html_url":"https://github.com/vitaly-krugl","followers_url":"https://api.github.com/users/vitaly-krugl/followers","following_url":"https://api.github.com/users/vitaly-krugl/following{/other_user}","gists_url":"https://api.github.com/users/vitaly-krugl/gists{/gist_id}","starred_url":"https://api.github.com/users/vitaly-krugl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vitaly-krugl/subscriptions","organizations_url":"https://api.github.com/users/vitaly-krugl/orgs","repos_url":"https://api.github.com/users/vitaly-krugl/repos","events_url":"https://api.github.com/users/vitaly-krugl/events{/privacy}","received_events_url":"https://api.github.com/users/vitaly-krugl/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-11-12T21:02:34Z","updated_at":"2021-12-05T17:48:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using requests 2.23.0 with Python 3.8. \r\n\r\nMy app configures the `requests.packages.urllib3.util.retry.Retry` instance and then passes it via the `max_retries` arg to `requests.adapters.HTTPAdapter` constructor and then mounts the adapter as follows:\r\n\r\n```\r\nclass RetriableSslSession(requests.Session):\r\n    def __init__(self):\r\n        super(RetriableSslSession, self).__init__()\r\n\r\n        self.mount('https://', create_default_ssl_adapter())\r\n```\r\n\r\nThen before making a request, my app sets `session.auth` to an instance of [EdgeGridAuth](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/master/akamai/edgegrid/edgegrid.py) that is derived from `requests.auth.AuthBase`.\r\n\r\nSince EdgeGridAuth implements the [AuthBase.\\_\\_call\\_\\_](https://github.com/akamai/AkamaiOPEN-edgegrid-python/blob/bbfd58b75a61684ef72e29d2dab2e81492b3f4cb/akamai/edgegrid/edgegrid.py#L257) method, I expected that the Authorization header would be generated for each retry. However, in our apache proxy logs, we're seeing the same Authorization header reused from time to time, which suggests that retries are not causing the Authorization header to be generated.\r\n\r\nCould you please let me know what I may be doing wrong and explain how to cause the Authorization header to be re-generated for each Retry?","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5975/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5971","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5971/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5971/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5971/events","html_url":"https://github.com/psf/requests/pull/5971","id":1043038792,"node_id":"PR_kwDOABTKOs4uA4KW","number":5971,"title":"Reusing SSLContext in a session","user":{"login":"perilEcho","id":69120418,"node_id":"MDQ6VXNlcjY5MTIwNDE4","avatar_url":"https://avatars.githubusercontent.com/u/69120418?v=4","gravatar_id":"","url":"https://api.github.com/users/perilEcho","html_url":"https://github.com/perilEcho","followers_url":"https://api.github.com/users/perilEcho/followers","following_url":"https://api.github.com/users/perilEcho/following{/other_user}","gists_url":"https://api.github.com/users/perilEcho/gists{/gist_id}","starred_url":"https://api.github.com/users/perilEcho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/perilEcho/subscriptions","organizations_url":"https://api.github.com/users/perilEcho/orgs","repos_url":"https://api.github.com/users/perilEcho/repos","events_url":"https://api.github.com/users/perilEcho/events{/privacy}","received_events_url":"https://api.github.com/users/perilEcho/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-03T03:13:54Z","updated_at":"2021-11-03T03:13:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5971","html_url":"https://github.com/psf/requests/pull/5971","diff_url":"https://github.com/psf/requests/pull/5971.diff","patch_url":"https://github.com/psf/requests/pull/5971.patch","merged_at":null},"body":"A pull request to take a hit at fixing issue #4322 \r\n\r\nWorked with my team and we made it so that HTTPAdapter has a default SSLContext initialized when the adapter is constructed. SSLContext is made by using urllib3's function to create context. The context is passed into the poolmanager as pool_kwargs which can take in SSLContext.\r\n\r\nTested the reuse of SSLContext by using jmcackle's test functions they've made for adapters.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5971/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5953","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5953/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5953/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5953/events","html_url":"https://github.com/psf/requests/pull/5953","id":1021171999,"node_id":"PR_kwDOABTKOs4s8rEb","number":5953,"title":"Add ipv6 support to should_bypass_proxies","user":{"login":"derekhiggins","id":883848,"node_id":"MDQ6VXNlcjg4Mzg0OA==","avatar_url":"https://avatars.githubusercontent.com/u/883848?v=4","gravatar_id":"","url":"https://api.github.com/users/derekhiggins","html_url":"https://github.com/derekhiggins","followers_url":"https://api.github.com/users/derekhiggins/followers","following_url":"https://api.github.com/users/derekhiggins/following{/other_user}","gists_url":"https://api.github.com/users/derekhiggins/gists{/gist_id}","starred_url":"https://api.github.com/users/derekhiggins/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/derekhiggins/subscriptions","organizations_url":"https://api.github.com/users/derekhiggins/orgs","repos_url":"https://api.github.com/users/derekhiggins/repos","events_url":"https://api.github.com/users/derekhiggins/events{/privacy}","received_events_url":"https://api.github.com/users/derekhiggins/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-08T14:38:07Z","updated_at":"2021-10-18T11:28:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5953","html_url":"https://github.com/psf/requests/pull/5953","diff_url":"https://github.com/psf/requests/pull/5953.diff","patch_url":"https://github.com/psf/requests/pull/5953.patch","merged_at":null},"body":"Add support to should_bypass_proxies to support\r\nIPv6 ipaddresses and CIDRs in no_proxy. Includes\r\nadding IPv6 support to various other helper functions.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5953/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5950","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5950/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5950/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5950/events","html_url":"https://github.com/psf/requests/issues/5950","id":1016443852,"node_id":"I_kwDOABTKOs48lbPM","number":5950,"title":"RequestsCookieJar._find_on_duplicates wrongly fails on cookie with empty value","user":{"login":"alexpostolache","id":61288277,"node_id":"MDQ6VXNlcjYxMjg4Mjc3","avatar_url":"https://avatars.githubusercontent.com/u/61288277?v=4","gravatar_id":"","url":"https://api.github.com/users/alexpostolache","html_url":"https://github.com/alexpostolache","followers_url":"https://api.github.com/users/alexpostolache/followers","following_url":"https://api.github.com/users/alexpostolache/following{/other_user}","gists_url":"https://api.github.com/users/alexpostolache/gists{/gist_id}","starred_url":"https://api.github.com/users/alexpostolache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexpostolache/subscriptions","organizations_url":"https://api.github.com/users/alexpostolache/orgs","repos_url":"https://api.github.com/users/alexpostolache/repos","events_url":"https://api.github.com/users/alexpostolache/events{/privacy}","received_events_url":"https://api.github.com/users/alexpostolache/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-05T15:06:09Z","updated_at":"2021-12-30T15:00:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Getting the value of  a cookie which is set without a value by a website raises a `KeyError`. I don't know if this is by design. Browsers seem to accept these kind of cookies, even though this behaviour seems like bad practice.\r\n\r\n## Expected Result\r\n\r\nAn empty string.\r\n\r\n## Actual Result\r\n\r\n`RequestsCookieJar._find_no_duplicates` raises a `KeyError`\r\n\r\n## Reproduction Steps\r\nIn `ipython`:\r\n```python\r\nimport requests\r\nresp = requests.get(\"https://www.pib-insurance.com/\")\r\nresp.cookies.get_dict() # pretty print cookies\r\nresp.cookies[\"firstname\"]\r\n```\r\n\r\n## Fix\r\nI think last `if` in `_find_no_duplicates` (line **397** of `cookies.py`) should be `if toReturn is not None:` to accommodate for cookies without values.\r\n\r\nThanks!","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5950/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5950/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5936","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5936/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5936/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5936/events","html_url":"https://github.com/psf/requests/issues/5936","id":998380556,"node_id":"I_kwDOABTKOs47ghQM","number":5936,"title":"`cert` parameter does not accept a single `pathlib.Path` object as argument","user":{"login":"nyuszika7h","id":482367,"node_id":"MDQ6VXNlcjQ4MjM2Nw==","avatar_url":"https://avatars.githubusercontent.com/u/482367?v=4","gravatar_id":"","url":"https://api.github.com/users/nyuszika7h","html_url":"https://github.com/nyuszika7h","followers_url":"https://api.github.com/users/nyuszika7h/followers","following_url":"https://api.github.com/users/nyuszika7h/following{/other_user}","gists_url":"https://api.github.com/users/nyuszika7h/gists{/gist_id}","starred_url":"https://api.github.com/users/nyuszika7h/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nyuszika7h/subscriptions","organizations_url":"https://api.github.com/users/nyuszika7h/orgs","repos_url":"https://api.github.com/users/nyuszika7h/repos","events_url":"https://api.github.com/users/nyuszika7h/events{/privacy}","received_events_url":"https://api.github.com/users/nyuszika7h/received_events","type":"User","site_admin":false},"labels":[{"id":76800,"node_id":"MDU6TGFiZWw3NjgwMA==","url":"https://api.github.com/repos/psf/requests/labels/Feature%20Request","name":"Feature Request","color":"02e10c","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-09-16T16:01:24Z","updated_at":"2021-10-01T14:33:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"requests seems to have special handling for when the `cert` parameter is a single `str`, but does not extend the same special handling to `pathlib.Path`, meaning currently you either have to do `cert=str(path)` or `cert=(path, path)`.\r\n\r\n## Expected Result\r\n\r\n`Path` objects should be handled just like `str`.\r\n\r\n## Actual Result\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/api.py\", line 61, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 416, in send\r\n    self.cert_verify(conn, request.url, verify, cert)\r\n  File \"/home/nyuszika7h/test/.venv/lib/python3.9/site-packages/requests/adapters.py\", line 243, in cert_verify\r\n    conn.cert_file = cert[0]\r\nTypeError: 'PosixPath' object is not subscriptable\r\n```\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nfrom pathlib import Path\r\n\r\nimport requests\r\n\r\nrequests.get('https://example.com', cert=Path('cert.pem'))\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```json\r\n{\r\n  \"chardet\": {\r\n    \"version\": null\r\n  },\r\n  \"charset_normalizer\": {\r\n    \"version\": \"2.0.5\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"3.2\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.9.2\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.10.0-8-amd64\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"\",\r\n    \"version\": null\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.26.0\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"101010bf\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.6\"\r\n  },\r\n  \"using_charset_normalizer\": true,\r\n  \"using_pyopenssl\": false\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5936/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5936/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5922","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5922/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5922/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5922/events","html_url":"https://github.com/psf/requests/pull/5922","id":985083834,"node_id":"MDExOlB1bGxSZXF1ZXN0NzI0NDM4NjY0","number":5922,"title":"Always use value of session.verify when set, fixes #5921","user":{"login":"brmzkw","id":795841,"node_id":"MDQ6VXNlcjc5NTg0MQ==","avatar_url":"https://avatars.githubusercontent.com/u/795841?v=4","gravatar_id":"","url":"https://api.github.com/users/brmzkw","html_url":"https://github.com/brmzkw","followers_url":"https://api.github.com/users/brmzkw/followers","following_url":"https://api.github.com/users/brmzkw/following{/other_user}","gists_url":"https://api.github.com/users/brmzkw/gists{/gist_id}","starred_url":"https://api.github.com/users/brmzkw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brmzkw/subscriptions","organizations_url":"https://api.github.com/users/brmzkw/orgs","repos_url":"https://api.github.com/users/brmzkw/repos","events_url":"https://api.github.com/users/brmzkw/events{/privacy}","received_events_url":"https://api.github.com/users/brmzkw/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-01T12:20:19Z","updated_at":"2021-09-01T12:47:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5922","html_url":"https://github.com/psf/requests/pull/5922","diff_url":"https://github.com/psf/requests/pull/5922.diff","patch_url":"https://github.com/psf/requests/pull/5922.patch","merged_at":null},"body":"This fixes https://github.com/psf/requests/issues/5921 where the value of REQUESTS_CA_BUNDLE is read even when certificate verification is disabled through the session.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5922/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5915","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5915/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5915/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5915/events","html_url":"https://github.com/psf/requests/pull/5915","id":980930645,"node_id":"MDExOlB1bGxSZXF1ZXN0NzIxMDc0NDc1","number":5915,"title":"Adds a Realistic WSGI Server for Testing","user":{"login":"theGOTOguy","id":1411050,"node_id":"MDQ6VXNlcjE0MTEwNTA=","avatar_url":"https://avatars.githubusercontent.com/u/1411050?v=4","gravatar_id":"","url":"https://api.github.com/users/theGOTOguy","html_url":"https://github.com/theGOTOguy","followers_url":"https://api.github.com/users/theGOTOguy/followers","following_url":"https://api.github.com/users/theGOTOguy/following{/other_user}","gists_url":"https://api.github.com/users/theGOTOguy/gists{/gist_id}","starred_url":"https://api.github.com/users/theGOTOguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theGOTOguy/subscriptions","organizations_url":"https://api.github.com/users/theGOTOguy/orgs","repos_url":"https://api.github.com/users/theGOTOguy/repos","events_url":"https://api.github.com/users/theGOTOguy/events{/privacy}","received_events_url":"https://api.github.com/users/theGOTOguy/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-08-27T06:49:12Z","updated_at":"2022-01-31T01:42:24Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5915","html_url":"https://github.com/psf/requests/pull/5915","diff_url":"https://github.com/psf/requests/pull/5915.diff","patch_url":"https://github.com/psf/requests/pull/5915.patch","merged_at":null},"body":"Sending of chunked-encoded data is not currently tested to be correct anywhere in requests' tests, and is called out as a needed improvement in #5906.  This is a hurdle to accepting #5664, a change which would both simplify requests' code and consistently use [urllib3 for retrying errors](https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html).  \r\n\r\nThe [existing test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py) is a simple socket that can send and receive data and is not aware of HTTP protocols.  Therefore, using it to verify correct sending of chunked-encoded data, for instance, would ultimately become a change-detector test.  \r\n\r\nThis change seeks to remedy that while also taking a step towards both simplifying and strengthening requests' tests.\r\n\r\nWe strengthen requests' tests by introducing the popular [Werkzeug library](https://github.com/pallets/werkzeug) as an explicit test dependency ([Flask](https://github.com/pallets/flask), which uses Werkzeug, is already a test dependency).  By doing so, we leverage their authority as an implementer of [PEP 3333](https://www.python.org/dev/peps/pep-3333/) to validate our own implementation of chunked encoding.  This implicitly future-proofs against any hypothetical breaking changes to the standard by testing against Werkzeug's trusted implementation.\r\n\r\nWe also simplify requests' tests, since the implementation of the test [WerkzeugServer](https://github.com/psf/requests/commit/f1f838e36bc24fb40d7121e72298da3e5a7149ff#diff-a53b39ec2e425dad0c8387f8402839b2ec328e93494086ed66abb4b49708deeb) here is substantially more concise than the [current test server](https://github.com/psf/requests/blob/main/tests/testserver/server.py).  If this change is accepted, in another pull request I will refactor all of requests' tests to use the WerkzeugServer rather than the current test server.  ","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5915/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5875","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5875/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5875/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5875/events","html_url":"https://github.com/psf/requests/pull/5875","id":945325266,"node_id":"MDExOlB1bGxSZXF1ZXN0NjkwNjcwMTk3","number":5875,"title":"Make chardet/charset_normalizer optional dependencies","user":{"login":"akx","id":58669,"node_id":"MDQ6VXNlcjU4NjY5","avatar_url":"https://avatars.githubusercontent.com/u/58669?v=4","gravatar_id":"","url":"https://api.github.com/users/akx","html_url":"https://github.com/akx","followers_url":"https://api.github.com/users/akx/followers","following_url":"https://api.github.com/users/akx/following{/other_user}","gists_url":"https://api.github.com/users/akx/gists{/gist_id}","starred_url":"https://api.github.com/users/akx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akx/subscriptions","organizations_url":"https://api.github.com/users/akx/orgs","repos_url":"https://api.github.com/users/akx/repos","events_url":"https://api.github.com/users/akx/events{/privacy}","received_events_url":"https://api.github.com/users/akx/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-15T12:24:28Z","updated_at":"2022-01-03T15:04:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5875","html_url":"https://github.com/psf/requests/pull/5875","diff_url":"https://github.com/psf/requests/pull/5875.diff","patch_url":"https://github.com/psf/requests/pull/5875.patch","merged_at":null},"body":"An implementation of #5871 for consideration.\r\n\r\nUnlike my suggestion in #5871, this implementation _prefers_ `chardet` / `charset_normalizer` if it's available, with the idea that those libraries should hopefully do a better job than trying to decode the payload in the two most likely encodings.\r\n\r\nDecoding ASCII and UTF-8 ([\"UTF-8 is used by 97.0% of all the websites whose character encoding we know.\"](https://w3techs.com/technologies/details/en-utf8)) will continue to work without those libraries, and a helpful error is raised in other cases.\r\n\r\nThis is still missing documentation, changelogs, etc. â help appreciated.\r\n\r\nConsidering the switchover to `charset_normalizer` has broken some users' workflows anyway, I think it wouldn't be too much of an additional breaking change to do this without a major version bump.\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5875/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5875/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5871","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5871/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5871/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5871/events","html_url":"https://github.com/psf/requests/issues/5871","id":944382996,"node_id":"MDU6SXNzdWU5NDQzODI5OTY=","number":5871,"title":"Make chardet/charset_normalizer optional?","user":{"login":"akx","id":58669,"node_id":"MDQ6VXNlcjU4NjY5","avatar_url":"https://avatars.githubusercontent.com/u/58669?v=4","gravatar_id":"","url":"https://api.github.com/users/akx","html_url":"https://github.com/akx","followers_url":"https://api.github.com/users/akx/followers","following_url":"https://api.github.com/users/akx/following{/other_user}","gists_url":"https://api.github.com/users/akx/gists{/gist_id}","starred_url":"https://api.github.com/users/akx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akx/subscriptions","organizations_url":"https://api.github.com/users/akx/orgs","repos_url":"https://api.github.com/users/akx/repos","events_url":"https://api.github.com/users/akx/events{/privacy}","received_events_url":"https://api.github.com/users/akx/received_events","type":"User","site_admin":false},"labels":[{"id":76800,"node_id":"MDU6TGFiZWw3NjgwMA==","url":"https://api.github.com/repos/psf/requests/labels/Feature%20Request","name":"Feature Request","color":"02e10c","default":false,"description":null}],"state":"open","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":23,"created_at":"2021-07-14T12:34:54Z","updated_at":"2022-01-13T16:35:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":"off-topic","body":"With a routine version bump of requirements, I noticed `chardet` had been switched out for `charset_normalizer` (which I had never heard of before) in #5797, apparently due to LGPL license concerns.\r\n\r\nI agree with @sigmavirus24's comment https://github.com/psf/requests/pull/5797#issuecomment-875158955 that it's strange for something as central in the Python ecosystem as `requests` is (45k stars, 8k forks, many contributors at the time of writing)  to switch to such a relatively unknown and unproven library (132 stars, 5 forks, 2 contributors) for a _hard_ dependency in something as central in the Python ecosystem as `requests` is. \r\n\r\nThe release notes say you could use `pip install \"requests[use_chardet_on_py3]\"` to use `chardet` instead of `charset_normalizer`, but with that extra set both libraries get installed.\r\n\r\nI would imagine many users don't really necessarily need the charset detection features in Requests; could we open a discussion on making both `chardet`/`charset_normalizer` optional, Ã¡ la `requests[chardet]` or `requests[charset_normalizer]`?\r\n\r\nAFAICS, the only place where `chardet` is actually used in `requests` is `Response.apparent_encoding`, which is used by `Response.text` when there is no determined encoding. \r\n\r\nMaybe `apparent_encoding` could try to\r\n\r\n1. as a built-in first attempt, try decoding the content as UTF-8 (which would likely be successful for many cases)\r\n2. if neither `chardet` or `charset_normalizer` is installed, warn the user (\"No encoding detection library is installed. Falling back to XXXX. Please see YYYY for instructions\" or somesuch) and return e.g. `ascii`\r\n3. use either chardet library as per usual","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5871/reactions","total_count":8,"+1":8,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5871/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5860","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5860/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5860/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5860/events","html_url":"https://github.com/psf/requests/pull/5860","id":938529554,"node_id":"MDExOlB1bGxSZXF1ZXN0Njg0ODk4MTcw","number":5860,"title":"Document de-duplication of keys for params and data","user":{"login":"verhovsky","id":5687998,"node_id":"MDQ6VXNlcjU2ODc5OTg=","avatar_url":"https://avatars.githubusercontent.com/u/5687998?v=4","gravatar_id":"","url":"https://api.github.com/users/verhovsky","html_url":"https://github.com/verhovsky","followers_url":"https://api.github.com/users/verhovsky/followers","following_url":"https://api.github.com/users/verhovsky/following{/other_user}","gists_url":"https://api.github.com/users/verhovsky/gists{/gist_id}","starred_url":"https://api.github.com/users/verhovsky/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/verhovsky/subscriptions","organizations_url":"https://api.github.com/users/verhovsky/orgs","repos_url":"https://api.github.com/users/verhovsky/repos","events_url":"https://api.github.com/users/verhovsky/events{/privacy}","received_events_url":"https://api.github.com/users/verhovsky/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-07T06:17:40Z","updated_at":"2022-01-03T15:05:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5860","html_url":"https://github.com/psf/requests/pull/5860","diff_url":"https://github.com/psf/requests/pull/5860.diff","patch_url":"https://github.com/psf/requests/pull/5860.patch","merged_at":null},"body":"and format the files dict format correctly","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5860/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5846","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5846/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5846/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5846/events","html_url":"https://github.com/psf/requests/issues/5846","id":930167724,"node_id":"MDU6SXNzdWU5MzAxNjc3MjQ=","number":5846,"title":"TestRequests.test_pyopenssl_redirect is broken in CI","user":{"login":"pquentin","id":42327,"node_id":"MDQ6VXNlcjQyMzI3","avatar_url":"https://avatars.githubusercontent.com/u/42327?v=4","gravatar_id":"","url":"https://api.github.com/users/pquentin","html_url":"https://github.com/pquentin","followers_url":"https://api.github.com/users/pquentin/followers","following_url":"https://api.github.com/users/pquentin/following{/other_user}","gists_url":"https://api.github.com/users/pquentin/gists{/gist_id}","starred_url":"https://api.github.com/users/pquentin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pquentin/subscriptions","organizations_url":"https://api.github.com/users/pquentin/orgs","repos_url":"https://api.github.com/users/pquentin/repos","events_url":"https://api.github.com/users/pquentin/events{/privacy}","received_events_url":"https://api.github.com/users/pquentin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-06-25T13:18:23Z","updated_at":"2022-02-21T18:46:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"TestRequests.test_pyopenssl_redirect is broken in CI.\r\n\r\nI just fixed the urllib3 integration tests to work on GitHub Actions in https://github.com/urllib3/urllib3/pull/2304, and noticed that TestRequests.test_pyopenssl_redirect is broken, and is broken on your CI as well. \r\n\r\n## Expected Result\r\n\r\nThe test should pass.\r\n\r\n## Actual Result\r\n\r\nThe test reliably fails, on all Python 3.6+ versions: https://github.com/psf/requests/runs/2715203297. Interestingly, it works on 2.7 and 3.5.\r\n\r\n## Reproduction Steps\r\n\r\nRun you CI: https://github.com/psf/requests/runs/2715203297\r\n\r\n## System Information\r\n\r\nFails on Linux, Windows and macOS. Also on PyPI. But only on Python 3.6+.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5846/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5833","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5833/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5833/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5833/events","html_url":"https://github.com/psf/requests/issues/5833","id":904032198,"node_id":"MDU6SXNzdWU5MDQwMzIxOTg=","number":5833,"title":"Discrepancies between self-prepared and session-prepared request headers","user":{"login":"rittneje","id":28784688,"node_id":"MDQ6VXNlcjI4Nzg0Njg4","avatar_url":"https://avatars.githubusercontent.com/u/28784688?v=4","gravatar_id":"","url":"https://api.github.com/users/rittneje","html_url":"https://github.com/rittneje","followers_url":"https://api.github.com/users/rittneje/followers","following_url":"https://api.github.com/users/rittneje/following{/other_user}","gists_url":"https://api.github.com/users/rittneje/gists{/gist_id}","starred_url":"https://api.github.com/users/rittneje/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rittneje/subscriptions","organizations_url":"https://api.github.com/users/rittneje/orgs","repos_url":"https://api.github.com/users/rittneje/repos","events_url":"https://api.github.com/users/rittneje/events{/privacy}","received_events_url":"https://api.github.com/users/rittneje/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-05-27T17:50:01Z","updated_at":"2022-01-06T12:57:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If we prepare a request normally (the `prepare()` method), it does not include any additional headers by default, even if the resulting prepared request is sent via a session.\r\n\r\nHowever, if the request is prepared via the session (the `prepare_request(Request)` method), then it will include a few headers by default: `Accept`, `Accept-Encoding`, `User-Agent`, and `Connection`.\r\n\r\nThere are some (arguably buggy) HTTP servers that apparently will reject any request that includes the `Accept` or `Accept-Encoding` header with 406 Not Acceptable.\r\n\r\nThis situation led to major confusion when trying to fix our usage of this library to send all the requests through a single session in order to leverage cookie handling.\r\n\r\nThis default header logic does not appear to be documented anywhere. I also think it is very confusing that a self-prepared request and a session-prepared request would have different headers. Unfortunately, I assume this cannot be changed easily for fear of breaking backwards compatibility.","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5833/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5816","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5816/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5816/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5816/events","html_url":"https://github.com/psf/requests/pull/5816","id":891696495,"node_id":"MDExOlB1bGxSZXF1ZXN0NjQ0NTIzOTEw","number":5816,"title":"Warn user if environment variables are used","user":{"login":"Akasurde","id":633765,"node_id":"MDQ6VXNlcjYzMzc2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/633765?v=4","gravatar_id":"","url":"https://api.github.com/users/Akasurde","html_url":"https://github.com/Akasurde","followers_url":"https://api.github.com/users/Akasurde/followers","following_url":"https://api.github.com/users/Akasurde/following{/other_user}","gists_url":"https://api.github.com/users/Akasurde/gists{/gist_id}","starred_url":"https://api.github.com/users/Akasurde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Akasurde/subscriptions","organizations_url":"https://api.github.com/users/Akasurde/orgs","repos_url":"https://api.github.com/users/Akasurde/repos","events_url":"https://api.github.com/users/Akasurde/events{/privacy}","received_events_url":"https://api.github.com/users/Akasurde/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-05-14T07:43:32Z","updated_at":"2022-01-03T15:05:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5816","html_url":"https://github.com/psf/requests/pull/5816","diff_url":"https://github.com/psf/requests/pull/5816.diff","patch_url":"https://github.com/psf/requests/pull/5816.patch","merged_at":null},"body":"When session.verify=False, session.trust_env=True and\r\nREQUESTS_CA_BUNDLE or CURL_CA_BUNDLE is defined as environment\r\nvariables then, notify user that requests will use environment variables\r\nrather than silently failing.\r\n\r\npartially fixes: #3829\r\n\r\nSigned-off-by: Abhijeet Kasurde <akasurde@redhat.com>","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5816/reactions","total_count":5,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":3,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5816/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5814","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5814/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5814/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5814/events","html_url":"https://github.com/psf/requests/issues/5814","id":886491580,"node_id":"MDU6SXNzdWU4ODY0OTE1ODA=","number":5814,"title":"Merging of default HTTP headers with specified headers breaks the defined ordering","user":{"login":"baderj","id":5196024,"node_id":"MDQ6VXNlcjUxOTYwMjQ=","avatar_url":"https://avatars.githubusercontent.com/u/5196024?v=4","gravatar_id":"","url":"https://api.github.com/users/baderj","html_url":"https://github.com/baderj","followers_url":"https://api.github.com/users/baderj/followers","following_url":"https://api.github.com/users/baderj/following{/other_user}","gists_url":"https://api.github.com/users/baderj/gists{/gist_id}","starred_url":"https://api.github.com/users/baderj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baderj/subscriptions","organizations_url":"https://api.github.com/users/baderj/orgs","repos_url":"https://api.github.com/users/baderj/repos","events_url":"https://api.github.com/users/baderj/events{/privacy}","received_events_url":"https://api.github.com/users/baderj/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-05-11T08:33:34Z","updated_at":"2021-05-11T16:58:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Even if headers are defined in an ``OrderedDict``, their order might change if they coincide with the ``default_headers`` set in ``utils.py``, namely ``User-Agent``, ``Accept-Encoding``, ``Accept``, and ``Connection``.\r\n\r\n## Expected Result\r\nThe order of the headers should not change when passed as an ``OrderedDict``. So for example:\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\nshould result in the ``Accept`` header coming first, followed by ``Accept-Encoding`` and finally ``User-Agent``.\r\n\r\n## Actual Result\r\nThe ``User-Agent`` comes first, followed by ``Accept-Encoding`` and then ``Accept`` \r\n\r\n## Reason\r\nThe default headers --- as set by ``requests.utils.default_headers()`` --- are merged with the user specified headers by the function ``requests.sessions.merge_settings``. This function first takes the default headers and then updates that with the user specified headers. This ensures that user specified headers overwrite the default ones.\r\n\r\nHowever, the update process does not change the order of the default headers. So when setting ``User-Agent`` after ``Accept``, this will not be taken into account as both headers are already in the default headers and in reverse order.\r\n\r\nA fix to ``merge_settings`` could be to take the user specified headers first, and then iterate over the default headers and add them in if their are misssing.\r\n\r\n## Workaround\r\nIf one wants exactly the headers specified, one can first create a ``Session`` and remove the default headers:\r\n\r\n```\r\ns = requests.Session()\r\ns.headers = {}\r\nr = s.get(url, headers=headers, ...)\r\n```\r\n\r\nHaving a way to change the default headers on the ``requests`` module would be a welcome addition. So one could change, for example, the user agent in one place and have it affect all requests calls that follow.\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests\r\nfrom collections import OrderedDict\r\n\r\nheaders = OrderedDict([\r\n    (\"Accept\",   '1'),\r\n    (\"Accept-Encoding\",   '2'),\r\n    (\"User-Agent\",   '3'),\r\n])\r\nr = requests.get('http://www.example.com', headers=headers)\r\n```\r\n\r\n## System Information\r\n\r\n    $ python -m requests.help\r\n\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"4.0.0\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.3.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.10\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.8.5\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.8.0-50-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010109f\",\r\n    \"version\": \"20.0.1\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010106f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.4\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5814/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5814/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5789","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5789/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5789/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5789/events","html_url":"https://github.com/psf/requests/issues/5789","id":853358939,"node_id":"MDU6SXNzdWU4NTMzNTg5Mzk=","number":5789,"title":"User guide for how to provide timeouts","user":{"login":"torotil","id":182122,"node_id":"MDQ6VXNlcjE4MjEyMg==","avatar_url":"https://avatars.githubusercontent.com/u/182122?v=4","gravatar_id":"","url":"https://api.github.com/users/torotil","html_url":"https://github.com/torotil","followers_url":"https://api.github.com/users/torotil/followers","following_url":"https://api.github.com/users/torotil/following{/other_user}","gists_url":"https://api.github.com/users/torotil/gists{/gist_id}","starred_url":"https://api.github.com/users/torotil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/torotil/subscriptions","organizations_url":"https://api.github.com/users/torotil/orgs","repos_url":"https://api.github.com/users/torotil/repos","events_url":"https://api.github.com/users/torotil/events{/privacy}","received_events_url":"https://api.github.com/users/torotil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-04-08T11:14:40Z","updated_at":"2021-12-02T09:00:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"[As](https://github.com/psf/requests/issues/5637) [many](https://github.com/psf/requests/issues/3054) [others](https://github.com/psf/requests/issues/2856) [before](https://github.com/psf/requests/issues/2508) [me](https://github.com/psf/requests/issues/2011) I have the need to set a default timeout for all requests (blocking forever just isnât a very good default in most cases I guess).\r\n\r\nI appreciate that this has been covered exhaustingly in this issue queue, that there [might not be a recommendation for all use-cases](https://github.com/psf/requests/issues/2011#issuecomment-64444354), and there are [different](https://github.com/psf/requests/issues/2011#issuecomment-64440818) [ways](https://github.com/psf/requests/issues/3054#issuecomment-197400891) [to](https://github.com/psf/requests/issues/2011#issuecomment-490050252) [do](https://github.com/psf/requests/issues/2011#issuecomment-637156626) this.\r\n\r\nThatâs exactly why Iâm proposing to add documentation at the [appropriate](https://2.python-requests.org/en/master/user/advanced/#timeouts) [places](https://2.python-requests.org/en/master/user/advanced/#session-objects) for this in order to improve the experience for downstream developers and to avoid further mayhem in the issue queue.\r\n\r\nSo what are recommendable ways to have a default timeout and which disadvantages / advantages do they have?","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5789/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5789/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5779","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5779/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5779/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5779/events","html_url":"https://github.com/psf/requests/pull/5779","id":836016285,"node_id":"MDExOlB1bGxSZXF1ZXN0NTk2NTg3NDA4","number":5779,"title":"sets a default timeout and resolves #3070","user":{"login":"grintor","id":3444196,"node_id":"MDQ6VXNlcjM0NDQxOTY=","avatar_url":"https://avatars.githubusercontent.com/u/3444196?v=4","gravatar_id":"","url":"https://api.github.com/users/grintor","html_url":"https://github.com/grintor","followers_url":"https://api.github.com/users/grintor/followers","following_url":"https://api.github.com/users/grintor/following{/other_user}","gists_url":"https://api.github.com/users/grintor/gists{/gist_id}","starred_url":"https://api.github.com/users/grintor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/grintor/subscriptions","organizations_url":"https://api.github.com/users/grintor/orgs","repos_url":"https://api.github.com/users/grintor/repos","events_url":"https://api.github.com/users/grintor/events{/privacy}","received_events_url":"https://api.github.com/users/grintor/received_events","type":"User","site_admin":false},"labels":[{"id":44501256,"node_id":"MDU6TGFiZWw0NDUwMTI1Ng==","url":"https://api.github.com/repos/psf/requests/labels/Breaking%20API%20Change","name":"Breaking API Change","color":"eb6420","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-19T13:50:35Z","updated_at":"2022-01-03T15:05:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5779","html_url":"https://github.com/psf/requests/pull/5779","diff_url":"https://github.com/psf/requests/pull/5779.diff","patch_url":"https://github.com/psf/requests/pull/5779.patch","merged_at":null},"body":"This sets a (very high) default timeout which is guaranteed not to create any breaking changes while also fixing the longstanding issue of requests possibly hanging indefinitely in any script where the dev forgot to include a timeout. I would like to urge this commit make it into the next minor release version with the possibility of lowering the timeout to 300 seconds in the next major release version.\r\n\r\nPlease see the discussion at https://github.com/psf/requests/issues/3070","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5779/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5779/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5776","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5776/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5776/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5776/events","html_url":"https://github.com/psf/requests/pull/5776","id":833712902,"node_id":"MDExOlB1bGxSZXF1ZXN0NTk0NjYyNzU4","number":5776,"title":"Added explanation why the timeout is doubled.(#5773)","user":{"login":"cpyberry","id":80456253,"node_id":"MDQ6VXNlcjgwNDU2MjUz","avatar_url":"https://avatars.githubusercontent.com/u/80456253?v=4","gravatar_id":"","url":"https://api.github.com/users/cpyberry","html_url":"https://github.com/cpyberry","followers_url":"https://api.github.com/users/cpyberry/followers","following_url":"https://api.github.com/users/cpyberry/following{/other_user}","gists_url":"https://api.github.com/users/cpyberry/gists{/gist_id}","starred_url":"https://api.github.com/users/cpyberry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpyberry/subscriptions","organizations_url":"https://api.github.com/users/cpyberry/orgs","repos_url":"https://api.github.com/users/cpyberry/repos","events_url":"https://api.github.com/users/cpyberry/events{/privacy}","received_events_url":"https://api.github.com/users/cpyberry/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-03-17T12:21:12Z","updated_at":"2022-01-03T15:22:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/psf/requests/pulls/5776","html_url":"https://github.com/psf/requests/pull/5776","diff_url":"https://github.com/psf/requests/pull/5776.diff","patch_url":"https://github.com/psf/requests/pull/5776.patch","merged_at":null},"body":"## issue\r\n\r\n#5773","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5776/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5776/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/psf/requests/issues/5773","repository_url":"https://api.github.com/repos/psf/requests","labels_url":"https://api.github.com/repos/psf/requests/issues/5773/labels{/name}","comments_url":"https://api.github.com/repos/psf/requests/issues/5773/comments","events_url":"https://api.github.com/repos/psf/requests/issues/5773/events","html_url":"https://github.com/psf/requests/issues/5773","id":831807572,"node_id":"MDU6SXNzdWU4MzE4MDc1NzI=","number":5773,"title":"Connection timeout (not Read, Wall or Total) is consistently taking twice as long","user":{"login":"MestreLion","id":992317,"node_id":"MDQ6VXNlcjk5MjMxNw==","avatar_url":"https://avatars.githubusercontent.com/u/992317?v=4","gravatar_id":"","url":"https://api.github.com/users/MestreLion","html_url":"https://github.com/MestreLion","followers_url":"https://api.github.com/users/MestreLion/followers","following_url":"https://api.github.com/users/MestreLion/following{/other_user}","gists_url":"https://api.github.com/users/MestreLion/gists{/gist_id}","starred_url":"https://api.github.com/users/MestreLion/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MestreLion/subscriptions","organizations_url":"https://api.github.com/users/MestreLion/orgs","repos_url":"https://api.github.com/users/MestreLion/repos","events_url":"https://api.github.com/users/MestreLion/events{/privacy}","received_events_url":"https://api.github.com/users/MestreLion/received_events","type":"User","site_admin":false},"labels":[{"id":136616769,"node_id":"MDU6TGFiZWwxMzY2MTY3Njk=","url":"https://api.github.com/repos/psf/requests/labels/Documentation","name":"Documentation","color":"fad8c7","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-03-15T13:23:45Z","updated_at":"2021-08-28T02:46:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm aware that several issues related to timeout were opened (and closed) before, so I'm trying to narrow this report down to a very specific scope: **connection** timeout is behaving in a consistent, wrong way: it times out at _precisely_ **twice** the requested time.\r\n\r\nResults below are _so_ consistent we must acknowledge there is _something_ going on here! I **beg** you guys not to dismiss this report before taking a look at it!\r\n\r\nWhat this report is **not** about:\r\n- Total/Wall timeout:\r\nThat would be a nice feature, but I'm fully aware this is currently outside the scope of Requests. I'm focusing on _connection_ timeout only.\r\n\r\n- Read timeout:\r\nAll my tests were using http://google.com:81, which fails to even _connect_. There's no read involved, the server exists but never responds, not even to refuse the connection. No data is ever transmitted. No HTTP connection is ever established. This is **not** about `ReadTimeoutError`, this is about `ConnectTimeoutError`.\r\n\r\n- Accurate timings / network fluctuations:\r\nNot asking for millisecond precision. I don't even care about _whole seconds_ imprecision. But, surprisingly, `requests` is being incredibly accurate... to _twice_ the time.\r\n\r\n## Expected Result\r\n\r\n`requests.get('http://google.com:81', timeout=(4, 1))` should take _approximately_ 4 seconds to timeout.\r\n\r\n## Actual Result\r\n\r\nIt _consistently_ takes about 8.0 seconds to raise `requests.ConnectTimeout`. It always takes twice the time, for timeouts ranging from 1 to 100. Exception message clearly says in the end: `Connection to google.com timed out. (connect timeout=4)`, a very distinct message from read timeouts.\r\n\r\n\r\n## Reproduction Steps\r\n\r\n```python\r\nimport requests, time, os, sys\r\n\r\n# Using a know URL to test connection timeout\r\ndef test_timeout(timeout, url='http://google.com:81'):\r\n    start = time.time()\r\n    try:\r\n        requests.get(url, timeout=timeout)\r\n        print(\"OK!\")  # will never reach this...\r\n    except requests.ConnectTimeout:  # any other exception will bubble out\r\n        print('{}: {:.1f}'.format(timeout, time.time()-start))\r\n\r\nprint(\"\\n1 to 10, simple numeric timeout\")\r\nfor i in range(1, 11):\r\n    test_timeout(i)\r\n\r\nprint(\"\\n1 to 10, (x, 1) timeout tuple\")\r\nfor i in range(1, 11):\r\n    test_timeout((i, 1))\r\n\r\nprint(\"\\n1 to 10, (x, 10) timeout tuple\")\r\nfor i in range(1, 11):\r\n    test_timeout((i, 1))\r\n\r\nprint(\"\\nLarge timeouts\")\r\nfor i in (20, 30, 50, 100):\r\n    test_timeout((i, 1))\r\n```\r\n\r\nResults:\r\n```\r\nLinux desktop 5.4.0-66-generic #74~18.04.2-Ubuntu SMP Fri Feb 5 11:17:31 UTC 2021 x86_64\r\n3.6.9 (default, Jan 26 2021, 15:33:00) \r\n[GCC 8.4.0]\r\nRequests: 2.25.1\r\nUrllib3: 1.26.3\r\n\r\n1 to 10, simple numeric timeout\r\n1: 2.0\r\n2: 4.0\r\n3: 6.0\r\n4: 8.0\r\n5: 10.0\r\n6: 12.0\r\n7: 14.0\r\n8: 16.0\r\n9: 18.0\r\n10: 20.0\r\n\r\n1 to 10, (x, 1) timeout tuple\r\n(1, 1): 2.0\r\n(2, 1): 4.0\r\n(3, 1): 6.0\r\n(4, 1): 8.0\r\n(5, 1): 10.0\r\n(6, 1): 12.0\r\n(7, 1): 14.0\r\n(8, 1): 16.0\r\n(9, 1): 18.0\r\n(10, 1): 20.0\r\n\r\n1 to 10, (x, 10) timeout tuple\r\n(1, 10): 2.0\r\n(2, 10): 4.0\r\n(3, 10): 6.0\r\n(4, 10): 8.0\r\n(5, 10): 10.0\r\n(6, 10): 12.0\r\n(7, 10): 14.0\r\n(8, 10): 16.0\r\n(9, 10): 18.0\r\n(10, 10): 20.0\r\n\r\nLarge timeouts\r\n(20, 1): 40.0\r\n(30, 1): 60.0\r\n(50, 1): 100.1\r\n(100, 1): 200.2\r\n```\r\n\r\n## System Information\r\n```\r\n{\r\n  \"chardet\": {\r\n    \"version\": \"3.0.4\"\r\n  },\r\n  \"cryptography\": {\r\n    \"version\": \"3.2.1\"\r\n  },\r\n  \"idna\": {\r\n    \"version\": \"2.8\"\r\n  },\r\n  \"implementation\": {\r\n    \"name\": \"CPython\",\r\n    \"version\": \"3.6.9\"\r\n  },\r\n  \"platform\": {\r\n    \"release\": \"5.4.0-66-generic\",\r\n    \"system\": \"Linux\"\r\n  },\r\n  \"pyOpenSSL\": {\r\n    \"openssl_version\": \"1010108f\",\r\n    \"version\": \"17.5.0\"\r\n  },\r\n  \"requests\": {\r\n    \"version\": \"2.25.1\"\r\n  },\r\n  \"system_ssl\": {\r\n    \"version\": \"1010100f\"\r\n  },\r\n  \"urllib3\": {\r\n    \"version\": \"1.26.3\"\r\n  },\r\n  \"using_pyopenssl\": true\r\n}\r\n```\r\n\r\nIt seems there **is** a single, \"hidden\", connection retry, performed by either `requests` or `urllib3`, somewhere in the line. It has been reported by other users in other platforms too.\r\n","reactions":{"url":"https://api.github.com/repos/psf/requests/issues/5773/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/psf/requests/issues/5773/timeline","performed_via_github_app":null}]