[{"url":"https://api.github.com/repos/pallets/flask/issues/4459","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/4459/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/4459/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/4459/events","html_url":"https://github.com/pallets/flask/issues/4459","id":1145776144,"node_id":"I_kwDOAAkbnM5ESygQ","number":4459,"title":"`flask run` rejects `--key foo.pem --cert foo.cert`","user":{"login":"wdscxsj","id":863369,"node_id":"MDQ6VXNlcjg2MzM2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/863369?v=4","gravatar_id":"","url":"https://api.github.com/users/wdscxsj","html_url":"https://github.com/wdscxsj","followers_url":"https://api.github.com/users/wdscxsj/followers","following_url":"https://api.github.com/users/wdscxsj/following{/other_user}","gists_url":"https://api.github.com/users/wdscxsj/gists{/gist_id}","starred_url":"https://api.github.com/users/wdscxsj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wdscxsj/subscriptions","organizations_url":"https://api.github.com/users/wdscxsj/orgs","repos_url":"https://api.github.com/users/wdscxsj/repos","events_url":"https://api.github.com/users/wdscxsj/events{/privacy}","received_events_url":"https://api.github.com/users/wdscxsj/received_events","type":"User","site_admin":false},"labels":[{"id":380608249,"node_id":"MDU6TGFiZWwzODA2MDgyNDk=","url":"https://api.github.com/repos/pallets/flask/labels/cli","name":"cli","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-02-21T13:07:04Z","updated_at":"2022-02-25T19:12:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When trying the development server, I find that `flask run --cert foo.cert --key foo.pem` works fine, but `flask run --key foo.pem --cert foo.cert` fails with:\r\n\r\n```\r\nError: Invalid value for '--key': \"--cert\" must also be specified.\r\n```\r\n\r\nIsn't this somewhat counterintuitive?\r\n\r\nIn flask/cli.py, [`_validate_key()`](https://github.com/pallets/flask/blob/3897a518014931a82c77a353e1e9c2248529b856/src/flask/cli.py#L711) function insists the certificate file should have been specified, and it feels too restrictive. But I'm not familiar with Click to contribute a pretty PR...\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9.10\r\n- Flask version: 2.0.3","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/4459/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/4459/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/4248","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/4248/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/4248/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/4248/events","html_url":"https://github.com/pallets/flask/issues/4248","id":982034262,"node_id":"MDU6SXNzdWU5ODIwMzQyNjI=","number":4248,"title":"pass CLI arg to `create_app` when using `flask.cli.FlaskGroup` custom script","user":{"login":"bytemain","id":13938334,"node_id":"MDQ6VXNlcjEzOTM4MzM0","avatar_url":"https://avatars.githubusercontent.com/u/13938334?v=4","gravatar_id":"","url":"https://api.github.com/users/bytemain","html_url":"https://github.com/bytemain","followers_url":"https://api.github.com/users/bytemain/followers","following_url":"https://api.github.com/users/bytemain/following{/other_user}","gists_url":"https://api.github.com/users/bytemain/gists{/gist_id}","starred_url":"https://api.github.com/users/bytemain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytemain/subscriptions","organizations_url":"https://api.github.com/users/bytemain/orgs","repos_url":"https://api.github.com/users/bytemain/repos","events_url":"https://api.github.com/users/bytemain/events{/privacy}","received_events_url":"https://api.github.com/users/bytemain/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-08-29T08:33:02Z","updated_at":"2022-02-23T15:29:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm using `app factory pattern`, I create an factory function, it has one parameter: `mode`, it accepts two values: `app` or `db`.\r\n\r\n```py\r\ndef create_app(mode):\r\n    app = Flask(__name__)\r\n    if mode == \"app\":\r\n        init_scheduler(app)\r\n        init_CORS(app)\r\n```\r\n\r\n## work in `flask_script`\r\n\r\npreviously I use `flask_script`, it has an `add_option` method, which we can set a `dest` parameter.\r\n\r\n```python\r\nfrom src import create_app\r\nfrom flask_script import Manager\r\nfrom flask_migrate import MigrateCommand\r\n\r\n\r\nmanager = Manager(create_app)\r\nmanager.add_option(\"-m\", \"--mode\", dest=\"mode\", default=\"app\", required=False)\r\nmanager.add_command(\"db\", MigrateCommand)\r\n\r\nif __name__ == \"__main__\":\r\n    manager.run(default_command=\"runserver\")\r\n```\r\n\r\nand then you can use:\r\n\r\n```bash\r\npython manage.py runserver\r\npython manage.py -m db migrate\r\n```\r\n\r\nand it will create different app instance.\r\n\r\n**but flask-scripts can not used anymore in flask 2.0**\r\n\r\n## some try\r\n\r\nas the doc(<https://flask.palletsprojects.com/en/2.0.x/cli/#custom-scripts>) said:\r\n\r\n\r\n```python\r\nfrom src import create_app\r\n\r\n\r\nimport click\r\nfrom click import Context\r\n\r\nfrom flask.cli import FlaskGroup\r\nfrom flask.cli import ScriptInfo\r\n\r\n\r\n@click.group(cls=FlaskGroup, create_app=create_app, invoke_without_command=True)\r\n@click.pass_context\r\ndef cli(ctx: Context):\r\n    if ctx.invoked_subcommand is None:\r\n        click.echo(\"I was invoked without subcommand\")\r\n        ctx.invoke(runserver)\r\n    else:\r\n        click.echo(f\"I am about to invoke {ctx.invoked_subcommand}\")\r\n\r\nif name == \"main\":\r\n    cli()\r\n```\r\n\r\nwe can use `FlaskGroup`, and it has a parameter `create_app`, but I found it has no way to pass `mode` parameter to `create_app` function.\r\n\r\nthe source code says that it just create app directly: https://github.com/pallets/flask/blob/main/src/flask/cli.py#L399\r\n\r\nso I want to see a solution for this.","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/4248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/4248/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/4239","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/4239/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/4239/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/4239/events","html_url":"https://github.com/pallets/flask/issues/4239","id":972493516,"node_id":"MDU6SXNzdWU5NzI0OTM1MTY=","number":4239,"title":"jQuery example and patterns/jquery document don't match","user":{"login":"philomelus","id":42464919,"node_id":"MDQ6VXNlcjQyNDY0OTE5","avatar_url":"https://avatars.githubusercontent.com/u/42464919?v=4","gravatar_id":"","url":"https://api.github.com/users/philomelus","html_url":"https://github.com/philomelus","followers_url":"https://api.github.com/users/philomelus/followers","following_url":"https://api.github.com/users/philomelus/following{/other_user}","gists_url":"https://api.github.com/users/philomelus/gists{/gist_id}","starred_url":"https://api.github.com/users/philomelus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/philomelus/subscriptions","organizations_url":"https://api.github.com/users/philomelus/orgs","repos_url":"https://api.github.com/users/philomelus/repos","events_url":"https://api.github.com/users/philomelus/events{/privacy}","received_events_url":"https://api.github.com/users/philomelus/received_events","type":"User","site_admin":false},"labels":[{"id":32876,"node_id":"MDU6TGFiZWwzMjg3Ng==","url":"https://api.github.com/repos/pallets/flask/labels/docs","name":"docs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":{"login":"davidism","id":1242887,"node_id":"MDQ6VXNlcjEyNDI4ODc=","avatar_url":"https://avatars.githubusercontent.com/u/1242887?v=4","gravatar_id":"","url":"https://api.github.com/users/davidism","html_url":"https://github.com/davidism","followers_url":"https://api.github.com/users/davidism/followers","following_url":"https://api.github.com/users/davidism/following{/other_user}","gists_url":"https://api.github.com/users/davidism/gists{/gist_id}","starred_url":"https://api.github.com/users/davidism/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidism/subscriptions","organizations_url":"https://api.github.com/users/davidism/orgs","repos_url":"https://api.github.com/users/davidism/repos","events_url":"https://api.github.com/users/davidism/events{/privacy}","received_events_url":"https://api.github.com/users/davidism/received_events","type":"User","site_admin":false},"assignees":[{"login":"davidism","id":1242887,"node_id":"MDQ6VXNlcjEyNDI4ODc=","avatar_url":"https://avatars.githubusercontent.com/u/1242887?v=4","gravatar_id":"","url":"https://api.github.com/users/davidism","html_url":"https://github.com/davidism","followers_url":"https://api.github.com/users/davidism/followers","following_url":"https://api.github.com/users/davidism/following{/other_user}","gists_url":"https://api.github.com/users/davidism/gists{/gist_id}","starred_url":"https://api.github.com/users/davidism/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidism/subscriptions","organizations_url":"https://api.github.com/users/davidism/orgs","repos_url":"https://api.github.com/users/davidism/repos","events_url":"https://api.github.com/users/davidism/events{/privacy}","received_events_url":"https://api.github.com/users/davidism/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2021-08-17T09:37:51Z","updated_at":"2022-02-26T20:20:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The patterns/jquery example shows using getJSON from jquery to do a get request.  I needed to do this via ajax/post, and it took me quite awhile to notice that the js_example in the flask repo DOES use ajax/post, even though the documentation says otherwise (and even refers to the js_example project in the git repo!).\r\n\r\nTo reproduce, look at the docs here:\r\n\r\nhttps://flask.palletsprojects.com/en/latest/patterns/jquery/\r\n\r\nand the code here (link from docs):\r\n\r\nhttps://github.com/pallets/flask/tree/main/examples/javascript\r\n\r\n- Python version: 3.9.6\r\n- Flask version: 2.0.1\r\n","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/4239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/4239/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/3871","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/3871/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/3871/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/3871/events","html_url":"https://github.com/pallets/flask/issues/3871","id":785962744,"node_id":"MDU6SXNzdWU3ODU5NjI3NDQ=","number":3871,"title":"Flask's Celery docs are going to start failing with Celery 6 and get deprecation warnings with 5.x today","user":{"login":"nickjj","id":813219,"node_id":"MDQ6VXNlcjgxMzIxOQ==","avatar_url":"https://avatars.githubusercontent.com/u/813219?v=4","gravatar_id":"","url":"https://api.github.com/users/nickjj","html_url":"https://github.com/nickjj","followers_url":"https://api.github.com/users/nickjj/followers","following_url":"https://api.github.com/users/nickjj/following{/other_user}","gists_url":"https://api.github.com/users/nickjj/gists{/gist_id}","starred_url":"https://api.github.com/users/nickjj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nickjj/subscriptions","organizations_url":"https://api.github.com/users/nickjj/orgs","repos_url":"https://api.github.com/users/nickjj/repos","events_url":"https://api.github.com/users/nickjj/events{/privacy}","received_events_url":"https://api.github.com/users/nickjj/received_events","type":"User","site_admin":false},"labels":[{"id":32876,"node_id":"MDU6TGFiZWwzMjg3Ng==","url":"https://api.github.com/repos/pallets/flask/labels/docs","name":"docs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-01-14T12:49:53Z","updated_at":"2021-03-10T23:04:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The current docs are at: https://flask.palletsprojects.com/en/1.1.x/patterns/celery/\r\n\r\nThey reference Celery's old configuration options which are the `CELERY_*` options. Since 5.x they've been renamed to be lowercase and there's an official migration guide available on Celery's site at https://docs.celeryproject.org/en/stable/userguide/configuration.html#conf-old-settings-map.\r\n\r\nAs of Celery 5.x, the old uppercase variants throw a deprecation warning and 6.x will remove them.\r\n\r\nThe current Flask docs for Celery reference things like:\r\n\r\n```py\r\n    celery = Celery(\r\n        app.import_name,\r\n        backend=app.config['CELERY_RESULT_BACKEND'],\r\n        broker=app.config['CELERY_BROKER_URL']\r\n    )\r\n```\r\n\r\n```py\r\nflask_app.config.update(\r\n    CELERY_BROKER_URL='redis://localhost:6379',\r\n    CELERY_RESULT_BACKEND='redis://localhost:6379'\r\n)\r\n```\r\n\r\nThese imply you're using Flask's configuration mechanism which require uppercase variable names to be available, but that conflicts with Celery's new lowercase variables.\r\n\r\nI talked with @ThiefMaster a few weeks ago about this on IRC and he came up with a great idea of doing:\r\n\r\n```py\r\n# settings.py\r\n\r\nCELERY_CONFIG = {\r\n  \"broker_url\": \"redis://localhost:6379/0\",\r\n  \"result_backend\": \"redis://localhost:6379/0\"\r\n}\r\n```\r\n\r\nAnd then in your Celery factory you can do `celery.conf.update(app.config.get(\"CELERY_CONFIG\", {}))`.\r\n\r\nThis solves the problem and is working out nicely in practice. I'm doing that in a real project, along with extracting out the duplicate Redis connection string into an environment variable, etc.. A working example of that pattern is at https://github.com/nickjj/docker-flask-example/blob/ca1d48499a4007378bbe363bd5dc117c1a33cc3a/config/settings.py#L21-L28.\r\n\r\nI didn't want to open a PR without asking first because I'm not sure which direction you want to go with the docs. To be honest the current docs are a little confusing because you jump straight into using Flask's app configuration values but there's no reference to setting up those config values.\r\n\r\nAlso with the current docs if you attempt to break things into separate files you'll end up with circular import issues when importing your tasks unless you start importing your tasks directly inside of the function you're using instead of the top of the file, but that's another issue. Although potentially semi-related if you plan to revamp the Celery docs.","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/3871/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/3871/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/3263","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/3263/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/3263/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/3263/events","html_url":"https://github.com/pallets/flask/issues/3263","id":456562526,"node_id":"MDU6SXNzdWU0NTY1NjI1MjY=","number":3263,"title":"FlaskGroup does not work when nested in a click.group","user":{"login":"gustapia06","id":21017154,"node_id":"MDQ6VXNlcjIxMDE3MTU0","avatar_url":"https://avatars.githubusercontent.com/u/21017154?v=4","gravatar_id":"","url":"https://api.github.com/users/gustapia06","html_url":"https://github.com/gustapia06","followers_url":"https://api.github.com/users/gustapia06/followers","following_url":"https://api.github.com/users/gustapia06/following{/other_user}","gists_url":"https://api.github.com/users/gustapia06/gists{/gist_id}","starred_url":"https://api.github.com/users/gustapia06/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gustapia06/subscriptions","organizations_url":"https://api.github.com/users/gustapia06/orgs","repos_url":"https://api.github.com/users/gustapia06/repos","events_url":"https://api.github.com/users/gustapia06/events{/privacy}","received_events_url":"https://api.github.com/users/gustapia06/received_events","type":"User","site_admin":false},"labels":[{"id":380608249,"node_id":"MDU6TGFiZWwzODA2MDgyNDk=","url":"https://api.github.com/repos/pallets/flask/labels/cli","name":"cli","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-06-15T18:11:48Z","updated_at":"2021-10-29T16:32:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Expected Behavior\r\nWhen using Flask CLI, I came to the case that we have a group of commands for a big program that uses `click`.\r\n```python\r\n# main group\r\n@click.group()\r\n@click.pass_context\r\ndef my_big_cli_group(ctx):\r\n    pass\r\n\r\n# sub group\r\n@my_big_cli_group.group()\r\n@click.pass_context\r\ndef my_nested_group(ctx):\r\n    pass\r\n\r\n# command for sub group\r\n@my_nested_group.command()\r\n@click.pass_context\r\n@click.option('-s', '--start', is_flag=True)\r\ndef my_command(ctx, start):\r\n    click.echo(start)\r\n```\r\n\r\nThe issue comes when nesting my flask app into the bigger group using `cls=FlaskGroup` and passing my `create_app` factory function.\r\n\r\n```python\r\n# flask app sub group\r\n@my_big_cli_group.group(cls=FlaskGroup, create_app=create_app)\r\n@click.pass_context\r\ndef my_flask_app(ctx):\r\n    pass\r\n```\r\n\r\nAfter running my `setup.py` pointing my entry point to `'my_big_cli = path.to:my_big_cli_group'`, I should expect the app to start once I do:\r\n```bash\r\n$ my_big_cli my_flask_app run\r\n```\r\n\r\n### Actual Behavior\r\nInstead, I get a `flask.cli.NoAppException`. It seems that `create_app` does not get passed on to `Group.group` instances on `click`.\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n File “/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py”, line 540, in list_commands\r\n   rv.update(info.load_app().cli.list_commands(ctx))\r\n File “/Users/the_user/Desktop/venv/lib/python3.7/site-packages/flask/cli.py”, line 393, in load_app\r\n   ‘Could not locate a Flask application. You did not provide ’\r\nflask.cli.NoAppException: Could not locate a Flask application. You did not provide the “FLASK_APP” environment variable, and a “wsgi.py” or “app.py” module was not found in the current directory.\r\n```\r\n\r\n### Work around\r\nIf I don't nest the flask app into a group but rather make it a new `click.group`, then after changing my `setup.py` to point to this new entry point as well, everything works as expected.\r\n\r\n```python\r\n# flask app group\r\n@click.group(cls=FlaskGroup, create_app=create_app)\r\n@click.pass_context\r\ndef my_flask_app(ctx):\r\n    pass\r\n```\r\nThen\r\n```bash\r\n$ my_flask_app run\r\n```\r\nworks perfectly fine\r\n\r\n\r\n### Environment\r\n\r\n* Python version: 3.7.3\r\n* Flask version: 1.0.3\r\n* Werkzeug version: 0.15.4","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/3263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/3263/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/3108","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/3108/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/3108/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/3108/events","html_url":"https://github.com/pallets/flask/issues/3108","id":415878424,"node_id":"MDU6SXNzdWU0MTU4Nzg0MjQ=","number":3108,"title":"config option for \"flask run\" (e.g. --dotenv/-e)","user":{"login":"jab","id":64992,"node_id":"MDQ6VXNlcjY0OTky","avatar_url":"https://avatars.githubusercontent.com/u/64992?v=4","gravatar_id":"","url":"https://api.github.com/users/jab","html_url":"https://github.com/jab","followers_url":"https://api.github.com/users/jab/followers","following_url":"https://api.github.com/users/jab/following{/other_user}","gists_url":"https://api.github.com/users/jab/gists{/gist_id}","starred_url":"https://api.github.com/users/jab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jab/subscriptions","organizations_url":"https://api.github.com/users/jab/orgs","repos_url":"https://api.github.com/users/jab/repos","events_url":"https://api.github.com/users/jab/events{/privacy}","received_events_url":"https://api.github.com/users/jab/received_events","type":"User","site_admin":false},"labels":[{"id":380608249,"node_id":"MDU6TGFiZWwzODA2MDgyNDk=","url":"https://api.github.com/repos/pallets/flask/labels/cli","name":"cli","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-02-28T23:58:09Z","updated_at":"2021-03-24T22:07:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Would it make sense to allow passing a `--config/-c` option to `flask run`, that would then be exposed to users somehow for subsequent passing to e.g. `app.config.from_pyfile()`?\r\n\r\n(I'm imagining this done in a reusable way so that a \"flask gunicorn\" custom command (the likes of which I've already implemented) could accept and expose a `-c` value similarly, so that the app could be configured from this same provided path whether running in development or production.)\r\n\r\nThis would reduce the dependence on an environment variable to specify this. Reason I ask is that many of the Flask users I'm supporting are allergic to environment variables for the reasons mentioned in #3095, and have been missing some way to pass a CLI option to `flask run` to help configure their apps. Thanks 😊","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/3108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/3108/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/2836","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/2836/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/2836/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/2836/events","html_url":"https://github.com/pallets/flask/issues/2836","id":333856282,"node_id":"MDU6SXNzdWUzMzM4NTYyODI=","number":2836,"title":"request points to wrong object in debugger when threading is enabled","user":{"login":"rkomorn","id":523308,"node_id":"MDQ6VXNlcjUyMzMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/523308?v=4","gravatar_id":"","url":"https://api.github.com/users/rkomorn","html_url":"https://github.com/rkomorn","followers_url":"https://api.github.com/users/rkomorn/followers","following_url":"https://api.github.com/users/rkomorn/following{/other_user}","gists_url":"https://api.github.com/users/rkomorn/gists{/gist_id}","starred_url":"https://api.github.com/users/rkomorn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rkomorn/subscriptions","organizations_url":"https://api.github.com/users/rkomorn/orgs","repos_url":"https://api.github.com/users/rkomorn/repos","events_url":"https://api.github.com/users/rkomorn/events{/privacy}","received_events_url":"https://api.github.com/users/rkomorn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-06-19T22:06:39Z","updated_at":"2020-08-05T01:23:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Expected Behavior\r\n\r\nDebugger should show the right request object.\r\n\r\n```python\r\nPaste a minimal example that causes the problem.from flask import Flask, request\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    print(request)\r\n    x = y\r\n    return 'Hello, World!'\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWe're seeing some honestly kind of dumbfounding behavior that makes no sense to us. I'm not a novice when it comes to troubleshooting things, but this one really baffles me because I'm basically certain I'm not doing anything weird.\r\n\r\nDebugger doesn't show the right \"request\" object often. See https://pasteboard.co/HqFNzwq.png for a screenshot of a case where the browser's URL bar shows the right thing, printing the request object shows the right thing in console logs, but using the debugger does not.\r\n\r\nThe request object is sometimes unbound, sometimes right, and seemingly often \"off by 1\" based on history.\r\n\r\nSo far, we can only seem to reproduce this on Linux, using Chrome and Firefox (edit: at first we thought it wasn't happening with Firefox but we found a repro with Firefox on Ubuntu 16.04 ). It doesn't seem to be happening from a Mac OS chrome client.\r\n\r\n### Environment\r\n* Python version: both 2.7 and 3.6 (in virtualenv-based environments)\r\n* Flask version: 1.0.x and it seems 0.12 as well\r\n* Werkzeug version: 0.14.1\r\n* Linux version(s): Ubuntu 18.04 , Ubuntu 16.04\r\n* Chrome: Chrome/65.0.3325.183","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/2836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/2836/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/2776","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/2776/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/2776/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/2776/events","html_url":"https://github.com/pallets/flask/issues/2776","id":322556939,"node_id":"MDU6SXNzdWUzMjI1NTY5Mzk=","number":2776,"title":"cannot call app.run() from custom cli command","user":{"login":"miguelgrinberg","id":2715854,"node_id":"MDQ6VXNlcjI3MTU4NTQ=","avatar_url":"https://avatars.githubusercontent.com/u/2715854?v=4","gravatar_id":"","url":"https://api.github.com/users/miguelgrinberg","html_url":"https://github.com/miguelgrinberg","followers_url":"https://api.github.com/users/miguelgrinberg/followers","following_url":"https://api.github.com/users/miguelgrinberg/following{/other_user}","gists_url":"https://api.github.com/users/miguelgrinberg/gists{/gist_id}","starred_url":"https://api.github.com/users/miguelgrinberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/miguelgrinberg/subscriptions","organizations_url":"https://api.github.com/users/miguelgrinberg/orgs","repos_url":"https://api.github.com/users/miguelgrinberg/repos","events_url":"https://api.github.com/users/miguelgrinberg/events{/privacy}","received_events_url":"https://api.github.com/users/miguelgrinberg/received_events","type":"User","site_admin":false},"labels":[{"id":380608249,"node_id":"MDU6TGFiZWwzODA2MDgyNDk=","url":"https://api.github.com/repos/pallets/flask/labels/cli","name":"cli","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-05-13T01:57:03Z","updated_at":"2021-06-11T17:37:17Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Expected Behavior\r\n\r\nThere are situations in which you may want to implement a custom application runner. Two examples that I can think of are running the application under the Werkzeug profiler, and starting the application in a background thread to perform integration tests against it.\r\n\r\nIn these situations, most people would want to create a custom CLI command that calls `app.run()` to start the application after applying any necessary changes, such as enabling profiling, etc.\r\n\r\nExample `bug.py`:\r\n\r\n```python\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\n\r\n@app.cli.command()\r\ndef custom_run():\r\n    app.run()\r\n```\r\n\r\nWhat I expect with the above example is that running `flask custom_run` starts the development web server.\r\n\r\n### Actual Behavior\r\n\r\n```\r\n(venv) $ FLASK_APP=bug.py flask custom_run\r\n/home/miguel/bug.py:7: Warning: Silently ignoring app.run() because the application is run from the flask command line executable.  Consider putting app.run() behind an if __name__ == \"__main__\" guard to silence this warning.\r\n```\r\n\r\nI think this warning should only appear when `app.run()` is called from the global scope of the main module. This can be determined from the number of frames in the call stack. The warning should be issued only if the call stack has two frames, but should not if there are more than two. Thoughts?","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/2776/reactions","total_count":19,"+1":19,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/2776/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/2520","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/2520/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/2520/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/2520/events","html_url":"https://github.com/pallets/flask/issues/2520","id":273817282,"node_id":"MDU6SXNzdWUyNzM4MTcyODI=","number":2520,"title":"Don't create View instances for each request","user":{"login":"davidism","id":1242887,"node_id":"MDQ6VXNlcjEyNDI4ODc=","avatar_url":"https://avatars.githubusercontent.com/u/1242887?v=4","gravatar_id":"","url":"https://api.github.com/users/davidism","html_url":"https://github.com/davidism","followers_url":"https://api.github.com/users/davidism/followers","following_url":"https://api.github.com/users/davidism/following{/other_user}","gists_url":"https://api.github.com/users/davidism/gists{/gist_id}","starred_url":"https://api.github.com/users/davidism/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidism/subscriptions","organizations_url":"https://api.github.com/users/davidism/orgs","repos_url":"https://api.github.com/users/davidism/repos","events_url":"https://api.github.com/users/davidism/events{/privacy}","received_events_url":"https://api.github.com/users/davidism/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":19,"created_at":"2017-11-14T14:45:10Z","updated_at":"2019-01-13T20:10:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"`View.as_view` creates a function that instantiates the class every request. This seems inefficient for no real gain.\r\n\r\n```python\r\nclass DeleteView(View):\r\n    methods = ['DELETE']\r\n\r\n    # this only needs to happen once\r\n    def __init__(self, model):\r\n        self.model = model\r\n        # imagine if we did something expensive here\r\n        # like generating a form based on the model\r\n```\r\n\r\nThe only argument I could think of for instantiating every request is if the constructor does something different based on the request. That seems like bad design, but any use that I can think of for that could be accomplished with properties instead.\r\n\r\nYes, there are ways to make it less expensive, like generating more ahead of time and passing more arguments, but that is not intuitive, and makes the class just a more complicated view factory.","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/2520/reactions","total_count":5,"+1":3,"-1":2,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/2520/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/1948","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/1948/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/1948/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/1948/events","html_url":"https://github.com/pallets/flask/issues/1948","id":164301672,"node_id":"MDU6SXNzdWUxNjQzMDE2NzI=","number":1948,"title":"Documentation for Flask + mod_wsgi + pyvenv + Python 3 doesn't work","user":{"login":"cdman","id":838250,"node_id":"MDQ6VXNlcjgzODI1MA==","avatar_url":"https://avatars.githubusercontent.com/u/838250?v=4","gravatar_id":"","url":"https://api.github.com/users/cdman","html_url":"https://github.com/cdman","followers_url":"https://api.github.com/users/cdman/followers","following_url":"https://api.github.com/users/cdman/following{/other_user}","gists_url":"https://api.github.com/users/cdman/gists{/gist_id}","starred_url":"https://api.github.com/users/cdman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cdman/subscriptions","organizations_url":"https://api.github.com/users/cdman/orgs","repos_url":"https://api.github.com/users/cdman/repos","events_url":"https://api.github.com/users/cdman/events{/privacy}","received_events_url":"https://api.github.com/users/cdman/received_events","type":"User","site_admin":false},"labels":[{"id":32876,"node_id":"MDU6TGFiZWwzMjg3Ng==","url":"https://api.github.com/repos/pallets/flask/labels/docs","name":"docs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-07-07T12:52:37Z","updated_at":"2019-10-02T18:39:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It says [in the documentation](http://flask.pocoo.org/docs/0.11/deploying/mod_wsgi/) (the last section - \"Working with Virtual Environments\"):\n\n> For Python 3 add the following lines to the top of your .wsgi file:\n> \n> ```\n> activate_this = '/path/to/env/bin/activate_this.py'\n> with open(activate_this) as file_:\n>     exec(file_.read(), dict(__file__=activate_this))\n> ```\n\nHowever `activate_this.py` is no longer present in pyvenv (see http://bugs.python.org/issue21496), thus the above code doesn't work. I found a stackoverflow answer where it said that just copying `activate_this.py` from a 2.7 virtualenv might work, however I didn't go down that route.\n\nHow I managed to get it working:\n\nI added `WSGIPythonHome /path/to/env` to the top level of my apache config (ie. outside of VirtualEnv). However that might be a little to big of a hammer if people want to run multiple applications in the same Apache instance. In that case setting `python-path` on `WSGIDaemonProcess` might work (however I didn't try it out).\n","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/1948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/1948/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/1852","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/1852/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/1852/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/1852/events","html_url":"https://github.com/pallets/flask/issues/1852","id":158212831,"node_id":"MDU6SXNzdWUxNTgyMTI4MzE=","number":1852,"title":"Remove version info from Werkzeug in the docs","user":{"login":"dawranliou","id":4307599,"node_id":"MDQ6VXNlcjQzMDc1OTk=","avatar_url":"https://avatars.githubusercontent.com/u/4307599?v=4","gravatar_id":"","url":"https://api.github.com/users/dawranliou","html_url":"https://github.com/dawranliou","followers_url":"https://api.github.com/users/dawranliou/followers","following_url":"https://api.github.com/users/dawranliou/following{/other_user}","gists_url":"https://api.github.com/users/dawranliou/gists{/gist_id}","starred_url":"https://api.github.com/users/dawranliou/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dawranliou/subscriptions","organizations_url":"https://api.github.com/users/dawranliou/orgs","repos_url":"https://api.github.com/users/dawranliou/repos","events_url":"https://api.github.com/users/dawranliou/events{/privacy}","received_events_url":"https://api.github.com/users/dawranliou/received_events","type":"User","site_admin":false},"labels":[{"id":32876,"node_id":"MDU6TGFiZWwzMjg3Ng==","url":"https://api.github.com/repos/pallets/flask/labels/docs","name":"docs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-06-02T18:50:50Z","updated_at":"2019-06-01T13:40:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The following version information is coming from the Werkzeug docs: \"New in version 0.6: The location can now be a unicode string that is encoded using the iri_to_uri() function.\" See http://flask.pocoo.org/docs/0.11/api/#flask.redirect.\n\nThere might be more of this kind of issue in the documentation. For this particular one, you can trace the code to docs/api.rst,: \n\n```\n.. autofunction:: redirect\n```\n","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/1852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/1852/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/pallets/flask/issues/289","repository_url":"https://api.github.com/repos/pallets/flask","labels_url":"https://api.github.com/repos/pallets/flask/issues/289/labels{/name}","comments_url":"https://api.github.com/repos/pallets/flask/issues/289/comments","events_url":"https://api.github.com/repos/pallets/flask/issues/289/events","html_url":"https://github.com/pallets/flask/issues/289","id":1314399,"node_id":"MDU6SXNzdWUxMzE0Mzk5","number":289,"title":"Blueprints and Extensions and SQLAlchemy","user":{"login":"mitsuhiko","id":7396,"node_id":"MDQ6VXNlcjczOTY=","avatar_url":"https://avatars.githubusercontent.com/u/7396?v=4","gravatar_id":"","url":"https://api.github.com/users/mitsuhiko","html_url":"https://github.com/mitsuhiko","followers_url":"https://api.github.com/users/mitsuhiko/followers","following_url":"https://api.github.com/users/mitsuhiko/following{/other_user}","gists_url":"https://api.github.com/users/mitsuhiko/gists{/gist_id}","starred_url":"https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mitsuhiko/subscriptions","organizations_url":"https://api.github.com/users/mitsuhiko/orgs","repos_url":"https://api.github.com/users/mitsuhiko/repos","events_url":"https://api.github.com/users/mitsuhiko/events{/privacy}","received_events_url":"https://api.github.com/users/mitsuhiko/received_events","type":"User","site_admin":false},"labels":[{"id":32876,"node_id":"MDU6TGFiZWwzMjg3Ng==","url":"https://api.github.com/repos/pallets/flask/labels/docs","name":"docs","color":"0e8a16","default":false,"description":null},{"id":357932495,"node_id":"MDU6TGFiZWwzNTc5MzI0OTU=","url":"https://api.github.com/repos/pallets/flask/labels/blueprints","name":"blueprints","color":"1d76db","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2011-07-30T08:39:56Z","updated_at":"2021-09-07T17:37:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We do not encourage people to create more than one database connection and to connect to databases in arbitrary extensions. The obvious exception are extensions whose sole purpose is to connect to databases. Dependency resolving is done by the developer. Eg:\n\n``` #!python\napp = Flask(__name__)\ndb = SQLAlchemy(app)\nsomething = SomethingElse(app, db)\n```\n\nThe problem comes with blueprints. If SomethingElse wants to define models it has to do that at a local scope where it has the reference to the db. Assuming it provides blueprints, how does the blueprint's views and other code get to the models? The sad truth is that if you make up blueprints on the fly the views in that blueprint don't know how to reference it.\n","reactions":{"url":"https://api.github.com/repos/pallets/flask/issues/289/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/pallets/flask/issues/289/timeline","performed_via_github_app":null}]